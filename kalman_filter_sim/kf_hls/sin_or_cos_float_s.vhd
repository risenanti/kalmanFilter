-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sin_or_cos_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (31 downto 0);
    do_cos : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sin_or_cos_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C2 : STD_LOGIC_VECTOR (7 downto 0) := "11000010";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_83 : STD_LOGIC_VECTOR (7 downto 0) := "10000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ref_4oPi_table_100_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_100_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_100_V_q0 : STD_LOGIC_VECTOR (99 downto 0);
    signal second_order_float_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_2_ce0 : STD_LOGIC;
    signal second_order_float_2_q0 : STD_LOGIC_VECTOR (29 downto 0);
    signal second_order_float_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_3_ce0 : STD_LOGIC;
    signal second_order_float_3_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_s_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_s_ce0 : STD_LOGIC;
    signal second_order_float_s_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_19_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_fu_232_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_reg_990 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_1_fu_242_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_997 : STD_LOGIC_VECTOR (22 downto 0);
    signal closepath_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1003 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_281_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_reg_1014 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_7_reg_1019 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_12_i_reg_1025 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1030 : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1036 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Val2_22_fu_362_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_22_reg_1042 : STD_LOGIC_VECTOR (2 downto 0);
    signal Mx_V_fu_442_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1047 : STD_LOGIC_VECTOR (28 downto 0);
    signal Ex_V_fu_456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_reg_1052 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_524_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1057 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_fu_556_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_12_reg_1063 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_57_i_reg_1068 : STD_LOGIC_VECTOR (14 downto 0);
    signal not_do_cos_i_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_do_cos_i_reg_1073 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1099 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_fu_625_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1107 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal result_V_reg_1112 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_fu_747_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_reg_1117 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_scaled_fixed2ieee_fu_214_ap_start : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_214_ap_done : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_214_ap_idle : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_214_ap_ready : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_214_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scaled_fixed2ieee_fu_214_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_5_i_i_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_i_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal expv_op_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_V_fu_258_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_266_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_i_i_fu_292_p1 : STD_LOGIC_VECTOR (99 downto 0);
    signal r_V_4_fu_295_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal Med_V_fu_301_p4 : STD_LOGIC_VECTOR (79 downto 0);
    signal p_Result_20_fu_285_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_5_fu_319_p0 : STD_LOGIC_VECTOR (79 downto 0);
    signal r_V_5_fu_319_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_5_fu_319_p2 : STD_LOGIC_VECTOR (103 downto 0);
    signal p_i_fu_350_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_368_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_fu_372_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_9_fu_377_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Result_i2_i_fu_384_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Result_21_fu_394_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_22_fu_402_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_23_fu_412_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_fu_420_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Mx_zeros_V_fu_428_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_i_fu_432_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_11_fu_436_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal storemerge_i_fu_355_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_i_fu_452_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sh_cast_fu_462_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_fu_466_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_i_fu_474_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_480_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_cast_fu_492_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_20_i_fu_500_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_19_i_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_2_cast1_fu_488_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_i_cast_fu_506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_i_fu_510_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ssdm_int_V_write_ass_fu_516_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_fu_560_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_13_fu_970_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal not_do_cos_i_fu_583_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_fu_546_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_24_fu_595_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_662_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_1_fu_662_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_1_fu_662_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal p_Val2_2_fu_977_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_15_fu_645_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_26_i_fu_668_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_60_i_fu_694_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_61_i_fu_698_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_28_i_fu_685_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_16_fu_702_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_63_i_cast_fu_708_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_3_fu_712_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal Mx_V_read_assign_fu_638_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_17_fu_726_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_17_fu_726_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_17_fu_726_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Ex_V_ret_fu_631_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_fu_743_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_18_fu_754_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_26_fu_780_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_786_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_824_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_862_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_s_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_25_fu_758_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_2_fu_766_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_25_fu_894_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_cast_fu_877_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_26_fu_902_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal not_or_cond_demorgan_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_cast_fu_935_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_3_fu_776_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_s_27_fu_909_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_3_fu_917_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_4_fu_948_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_27_fu_956_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_13_fu_970_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal OP1_V_3_fu_570_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_13_fu_970_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_2_fu_977_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_i_i_fu_966_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_17_fu_726_p10 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_1_fu_662_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal p_Val2_2_fu_977_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_5_fu_319_p00 : STD_LOGIC_VECTOR (103 downto 0);
    signal r_V_5_fu_319_p10 : STD_LOGIC_VECTOR (103 downto 0);

    component scaled_fixed2ieee IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (28 downto 0);
        prescale : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filter_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component filter_mux_164_1_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component filter_mul_mul_15ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component filter_mul_mul_15jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component sin_or_cos_float_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component sin_or_cos_float_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component sin_or_cos_float_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component sin_or_cos_float_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    ref_4oPi_table_100_V_U : component sin_or_cos_float_dEe
    generic map (
        DataWidth => 100,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_100_V_address0,
        ce0 => ref_4oPi_table_100_V_ce0,
        q0 => ref_4oPi_table_100_V_q0);

    second_order_float_2_U : component sin_or_cos_float_eOg
    generic map (
        DataWidth => 30,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_2_address0,
        ce0 => second_order_float_2_ce0,
        q0 => second_order_float_2_q0);

    second_order_float_3_U : component sin_or_cos_float_fYi
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_3_address0,
        ce0 => second_order_float_3_ce0,
        q0 => second_order_float_3_q0);

    second_order_float_s_U : component sin_or_cos_float_g8j
    generic map (
        DataWidth => 15,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_s_address0,
        ce0 => second_order_float_s_ce0,
        q0 => second_order_float_s_q0);

    grp_scaled_fixed2ieee_fu_214 : component scaled_fixed2ieee
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scaled_fixed2ieee_fu_214_ap_start,
        ap_done => grp_scaled_fixed2ieee_fu_214_ap_done,
        ap_idle => grp_scaled_fixed2ieee_fu_214_ap_idle,
        ap_ready => grp_scaled_fixed2ieee_fu_214_ap_ready,
        in_V => result_V_reg_1112,
        prescale => r_V_reg_1117,
        ap_return => grp_scaled_fixed2ieee_fu_214_ap_return);

    filter_mux_83_1_1_1_U50 : component filter_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => p_Val2_22_fu_362_p3,
        dout => tmp_fu_524_p10);

    filter_mux_164_1_hbi_U51 : component filter_mux_164_1_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_26_fu_780_p3,
        dout => tmp_7_fu_786_p18);

    filter_mux_164_1_hbi_U52 : component filter_mux_164_1_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_26_fu_780_p3,
        dout => tmp_8_fu_824_p18);

    filter_mul_mul_15ibs_U53 : component filter_mul_mul_15ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => p_Val2_13_fu_970_p0,
        din1 => p_Val2_13_fu_970_p1,
        dout => p_Val2_13_fu_970_p2);

    filter_mul_mul_15jbC_U54 : component filter_mul_mul_15jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => p_Val2_2_fu_977_p0,
        din1 => second_order_float_s_q0,
        dout => p_Val2_2_fu_977_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_scaled_fixed2ieee_fu_214_ap_done = ap_const_logic_1))) then 
                    ap_return_preg <= ret_i_i_fu_966_p1;
                end if; 
            end if;
        end if;
    end process;


    grp_scaled_fixed2ieee_fu_214_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scaled_fixed2ieee_fu_214_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_scaled_fixed2ieee_fu_214_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scaled_fixed2ieee_fu_214_ap_ready = ap_const_logic_1)) then 
                    grp_scaled_fixed2ieee_fu_214_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                Ex_V_reg_1052 <= Ex_V_fu_456_p2;
                Mx_V_reg_1047 <= p_Val2_11_fu_436_p2(57 downto 29);
                do_cos_read_reg_1036 <= (0=>do_cos, others=>'-');
                not_do_cos_i_reg_1073 <= not_do_cos_i_fu_583_p2;
                p_Val2_12_reg_1063 <= p_Val2_12_fu_556_p1;
                p_Val2_22_reg_1042 <= p_Val2_22_fu_362_p3;
                tmp_2_reg_1093 <= tmp_2_fu_610_p2;
                tmp_4_reg_1099 <= tmp_4_fu_615_p2;
                tmp_57_i_reg_1068 <= p_Val2_13_fu_970_p2(29 downto 15);
                tmp_reg_1057 <= tmp_fu_524_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_scaled_fixed2ieee_fu_214_ap_done = ap_const_logic_1))) then
                ap_return <= ret_i_i_fu_966_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                closepath_reg_1003 <= closepath_fu_246_p2;
                loc_V_1_reg_997 <= loc_V_1_fu_242_p1;
                loc_V_reg_990 <= p_Val2_s_fu_220_p1(30 downto 23);
                p_Result_19_reg_984 <= p_Val2_s_fu_220_p1(31 downto 31);
                tmp_12_reg_1014 <= tmp_12_fu_281_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                cos_basis_reg_1107 <= cos_basis_fu_625_p3;
                r_V_reg_1117 <= r_V_fu_747_p2;
                result_V_reg_1112 <= p_Val2_17_fu_726_p2(57 downto 29);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                p_Val2_7_reg_1019 <= r_V_5_fu_319_p2(76 downto 19);
                tmp_3_reg_1030 <= tmp_3_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((closepath_reg_1003 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_12_i_reg_1025 <= r_V_5_fu_319_p2(79 downto 77);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_scaled_fixed2ieee_fu_214_ap_done, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_scaled_fixed2ieee_fu_214_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    Ex_V_fu_456_p2 <= std_logic_vector(unsigned(storemerge_i_fu_355_p3) - unsigned(tmp_16_i_fu_452_p1));
    Med_V_fu_301_p4 <= r_V_4_fu_295_p2(99 downto 20);
    Mx_V_fu_442_p4 <= p_Val2_11_fu_436_p2(57 downto 29);
    Mx_V_read_assign_fu_638_p3 <= 
        ap_const_lv29_1FFFFFFF when (cos_basis_fu_625_p3(0) = '1') else 
        Mx_V_reg_1047;
    Mx_zeros_V_fu_428_p1 <= val_assign_fu_420_p3(5 - 1 downto 0);
    OP1_V_3_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i1_fu_560_p4),30));
    addr_V_fu_258_p3 <= 
        ap_const_lv8_3F when (closepath_fu_246_p2(0) = '1') else 
        expv_op_fu_252_p2;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_scaled_fixed2ieee_fu_214_ap_done, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_scaled_fixed2ieee_fu_214_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    closepath_fu_246_p2 <= "1" when (unsigned(loc_V_fu_232_p4) < unsigned(ap_const_lv8_7E)) else "0";
    cos_basis_fu_625_p3 <= 
        tmp_s_fu_620_p2 when (do_cos_read_reg_1036(0) = '1') else 
        tmp_reg_1057;
    expv_op_fu_252_p2 <= std_logic_vector(signed(ap_const_lv8_C2) + signed(loc_V_fu_232_p4));
    grp_scaled_fixed2ieee_fu_214_ap_start <= grp_scaled_fixed2ieee_fu_214_ap_start_reg;
    isNeg_fu_466_p3 <= Ex_V_fu_456_p2(7 downto 7);
    loc_V_1_fu_242_p1 <= p_Val2_s_fu_220_p1(23 - 1 downto 0);
    loc_V_2_fu_766_p4 <= p_Val2_18_fu_754_p1(30 downto 23);
    loc_V_3_fu_776_p1 <= p_Val2_18_fu_754_p1(23 - 1 downto 0);
    loc_V_fu_232_p4 <= p_Val2_s_fu_220_p1(30 downto 23);
    not_do_cos_i_fu_583_p0 <= (0=>do_cos, others=>'-');
    not_do_cos_i_fu_583_p2 <= (not_do_cos_i_fu_583_p0 xor ap_const_lv1_1);
    not_or_cond_demorgan_fu_925_p2 <= (tmp_3_reg_1030 and tmp_2_reg_1093);
    not_or_cond_fu_929_p2 <= (not_or_cond_demorgan_fu_925_p2 xor ap_const_lv1_1);
    not_tmp_s_fu_884_p2 <= (tmp_4_reg_1099 xor ap_const_lv1_1);
    or_cond_fu_869_p2 <= (tmp_3_reg_1030 and tmp_2_reg_1093);
    p_Ex_V_ret_fu_631_p3 <= 
        ap_const_lv8_0 when (cos_basis_fu_625_p3(0) = '1') else 
        Ex_V_reg_1052;
    p_Result_1_cast_fu_935_p3 <= 
        ap_const_lv23_7FFFFF when (not_or_cond_fu_929_p2(0) = '1') else 
        ap_const_lv23_0;
    p_Result_20_fu_285_p3 <= (ap_const_lv1_1 & loc_V_1_reg_997);
    p_Result_21_fu_394_p3 <= (p_Result_i2_i_fu_384_p4 & ap_const_lv1_1);
    
    p_Result_22_fu_402_p4_proc : process(p_Result_21_fu_394_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable p_Result_22_fu_402_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1D(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_21_fu_394_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_1D(5-1 downto 0)));
            for p_Result_22_fu_402_p4_i in 0 to 30-1 loop
                v0_cpy(p_Result_22_fu_402_p4_i) := p_Result_21_fu_394_p3(30-1-p_Result_22_fu_402_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(30-1 downto 0)))));
        res_mask := res_mask(30-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_22_fu_402_p4 <= resvalue(30-1 downto 0);
    end process;

    p_Result_23_fu_412_p3 <= (ap_const_lv2_3 & p_Result_22_fu_402_p4);
    p_Result_24_fu_595_p3 <= (sin_basis_fu_589_p2 & p_Result_i_fu_546_p4);
    p_Result_25_fu_758_p3 <= p_Val2_18_fu_754_p1(31 downto 31);
    p_Result_26_fu_780_p3 <= (p_Result_19_reg_984 & p_Val2_22_reg_1042);
    p_Result_27_fu_956_p4 <= ((p_Result_s_27_fu_909_p3 & ret_V_3_fu_917_p3) & ret_V_4_fu_948_p3);
    p_Result_i2_i_fu_384_p4 <= p_Val2_9_fu_377_p3(57 downto 29);
    p_Result_i_fu_546_p4 <= ssdm_int_V_write_ass_fu_516_p3(28 downto 22);
    p_Result_s_25_fu_894_p3 <= 
        not_tmp_s_fu_884_p2 when (tmp_5_fu_889_p2(0) = '1') else 
        p_Result_25_fu_758_p3;
    p_Result_s_26_fu_902_p3 <= 
        ap_const_lv8_FF when (tmp_4_reg_1099(0) = '1') else 
        loc_V_2_fu_766_p4;
    p_Result_s_27_fu_909_p3 <= 
        p_Result_s_fu_873_p2 when (or_cond_fu_869_p2(0) = '1') else 
        p_Result_s_25_fu_894_p3;
    p_Result_s_fu_873_p2 <= (p_Result_19_reg_984 and not_do_cos_i_reg_1073);
    p_Val2_11_fu_436_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_9_fu_377_p3),to_integer(unsigned('0' & tmp_13_i_fu_432_p1(31-1 downto 0)))));
    p_Val2_12_fu_556_p1 <= ssdm_int_V_write_ass_fu_516_p3(22 - 1 downto 0);
    p_Val2_13_fu_970_p0 <= OP1_V_3_fu_570_p1(15 - 1 downto 0);
    p_Val2_13_fu_970_p1 <= OP1_V_3_fu_570_p1(15 - 1 downto 0);
    p_Val2_15_fu_645_p4 <= second_order_float_2_q0(29 downto 1);
    p_Val2_16_fu_702_p2 <= std_logic_vector(signed(tmp_60_i_fu_694_p1) + signed(tmp_61_i_fu_698_p1));
    p_Val2_17_fu_726_p0 <= r_V_3_fu_712_p2;
    p_Val2_17_fu_726_p1 <= p_Val2_17_fu_726_p10(29 - 1 downto 0);
    p_Val2_17_fu_726_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_read_assign_fu_638_p3),58));
    p_Val2_17_fu_726_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_17_fu_726_p0) * signed('0' &p_Val2_17_fu_726_p1))), 58));
    p_Val2_18_fu_754_p1 <= grp_scaled_fixed2ieee_fu_214_ap_return;
    p_Val2_1_fu_662_p0 <= second_order_float_3_q0;
    p_Val2_1_fu_662_p1 <= p_Val2_1_fu_662_p10(22 - 1 downto 0);
    p_Val2_1_fu_662_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_12_reg_1063),45));
    p_Val2_1_fu_662_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_662_p0) * signed('0' &p_Val2_1_fu_662_p1))), 45));
    p_Val2_22_fu_362_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1003(0) = '1') else 
        tmp_12_i_reg_1025;
    p_Val2_2_fu_977_p0 <= p_Val2_2_fu_977_p00(15 - 1 downto 0);
    p_Val2_2_fu_977_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_i_reg_1068),30));
    p_Val2_9_fu_377_p3 <= 
        p_Val2_i_fu_372_p2 when (tmp_13_fu_368_p1(0) = '1') else 
        p_Val2_7_reg_1019;
    p_Val2_i_fu_372_p2 <= std_logic_vector(unsigned(ap_const_lv58_0) - unsigned(p_Val2_7_reg_1019));
    p_Val2_s_fu_220_p1 <= t_in;
    p_cast_cast_fu_877_p3 <= 
        ap_const_lv8_7F when (do_cos_read_reg_1036(0) = '1') else 
        ap_const_lv8_0;
    p_i_fu_350_p2 <= std_logic_vector(signed(ap_const_lv8_83) + signed(loc_V_reg_990));
    r_V_3_fu_712_p2 <= std_logic_vector(unsigned(p_Val2_16_fu_702_p2) + unsigned(tmp_63_i_cast_fu_708_p1));
    r_V_4_fu_295_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_100_V_q0),to_integer(unsigned('0' & tmp_7_i_i_fu_292_p1(31-1 downto 0)))));
    r_V_5_fu_319_p0 <= r_V_5_fu_319_p00(80 - 1 downto 0);
    r_V_5_fu_319_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Med_V_fu_301_p4),104));
    r_V_5_fu_319_p1 <= r_V_5_fu_319_p10(24 - 1 downto 0);
    r_V_5_fu_319_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_20_fu_285_p3),104));
    r_V_5_fu_319_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_5_fu_319_p0) * unsigned(r_V_5_fu_319_p1), 104));
    r_V_fu_747_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(rhs_V_fu_743_p1));
    ref_4oPi_table_100_V_address0 <= tmp_5_i_i_fu_276_p1(4 - 1 downto 0);

    ref_4oPi_table_100_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_3_fu_917_p3 <= 
        p_cast_cast_fu_877_p3 when (or_cond_fu_869_p2(0) = '1') else 
        p_Result_s_26_fu_902_p3;
    ret_V_4_fu_948_p3 <= 
        p_Result_1_cast_fu_935_p3 when (tmp_9_fu_943_p2(0) = '1') else 
        loc_V_3_fu_776_p1;
    ret_i_i_fu_966_p1 <= p_Result_27_fu_956_p4;
        rhs_V_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Ex_V_ret_fu_631_p3),9));

    second_order_float_2_address0 <= tmp_58_i_fu_603_p1(8 - 1 downto 0);

    second_order_float_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            second_order_float_2_ce0 <= ap_const_logic_1;
        else 
            second_order_float_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_3_address0 <= tmp_58_i_fu_603_p1(8 - 1 downto 0);

    second_order_float_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            second_order_float_3_ce0 <= ap_const_logic_1;
        else 
            second_order_float_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_s_address0 <= tmp_58_i_fu_603_p1(8 - 1 downto 0);

    second_order_float_s_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            second_order_float_s_ce0 <= ap_const_logic_1;
        else 
            second_order_float_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sh_assign_2_cast1_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_fu_480_p3),32));

        sh_assign_2_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_fu_480_p3),29));

    sh_assign_fu_480_p3 <= 
        tmp_18_i_fu_474_p2 when (isNeg_fu_466_p3(0) = '1') else 
        sh_cast_fu_462_p1;
        sh_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_fu_456_p2),9));

    sin_basis_fu_589_p2 <= (tmp_fu_524_p10 xor not_do_cos_i_fu_583_p2);
    ssdm_int_V_write_ass_fu_516_p3 <= 
        tmp_20_i_cast_fu_506_p1 when (isNeg_fu_466_p3(0) = '1') else 
        tmp_21_i_fu_510_p2;
    storemerge_i_fu_355_p3 <= 
        p_i_fu_350_p2 when (closepath_reg_1003(0) = '1') else 
        ap_const_lv8_0;
    tmp_12_fu_281_p1 <= addr_V_fu_258_p3(4 - 1 downto 0);
    tmp_13_fu_368_p1 <= p_Val2_22_fu_362_p3(1 - 1 downto 0);
    tmp_13_i_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_fu_428_p1),58));
    tmp_16_i_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_fu_428_p1),8));
    tmp_18_i_fu_474_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_cast_fu_462_p1));
    tmp_19_i_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_fu_442_p4),32));
    tmp_1_fu_862_p3 <= 
        tmp_7_fu_786_p18 when (cos_basis_reg_1107(0) = '1') else 
        tmp_8_fu_824_p18;
    tmp_20_i_cast_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_i_fu_500_p2),32));
    tmp_20_i_fu_500_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_fu_442_p4),to_integer(unsigned('0' & sh_assign_2_cast_fu_492_p1(29-1 downto 0)))));
    tmp_21_i_fu_510_p2 <= std_logic_vector(shift_left(unsigned(tmp_19_i_fu_496_p1),to_integer(unsigned('0' & sh_assign_2_cast1_fu_488_p1(31-1 downto 0)))));
    tmp_26_i_fu_668_p4 <= p_Val2_1_fu_662_p2(44 downto 23);
    tmp_28_i_fu_685_p4 <= p_Val2_2_fu_977_p2(29 downto 16);
    tmp_2_fu_610_p2 <= "1" when (loc_V_reg_990 = ap_const_lv8_0) else "0";
    tmp_3_fu_345_p2 <= "1" when (loc_V_1_reg_997 = ap_const_lv23_0) else "0";
    tmp_4_fu_615_p2 <= "1" when (loc_V_reg_990 = ap_const_lv8_FF) else "0";
    tmp_58_i_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_24_fu_595_p3),64));
    tmp_5_fu_889_p2 <= (tmp_4_reg_1099 or tmp_1_fu_862_p3);
    tmp_5_i_i_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_266_p4),64));
        tmp_60_i_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_15_fu_645_p4),30));

        tmp_61_i_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_i_fu_668_p4),30));

        tmp_63_i_cast_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_i_fu_685_p4),30));

    tmp_6_fu_266_p4 <= addr_V_fu_258_p3(7 downto 4);
    tmp_7_i_i_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_1014),100));
    tmp_9_fu_943_p2 <= (tmp_4_reg_1099 or or_cond_fu_869_p2);
    tmp_i1_fu_560_p4 <= ssdm_int_V_write_ass_fu_516_p3(21 downto 7);
    tmp_s_fu_620_p2 <= (tmp_reg_1057 xor ap_const_lv1_1);
    
    val_assign_fu_420_p3_proc : process(p_Result_23_fu_412_p3)
    begin
        val_assign_fu_420_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_23_fu_412_p3(i) = '1' then
                val_assign_fu_420_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

end behav;
