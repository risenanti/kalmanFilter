// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module scaled_fixed2ieee (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V,
        prescale,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    ap_const_lv32_0 = 32'd0;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [42:0] in_V;
input  [5:0] prescale;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] p_Result_s_fu_209_p3;
reg   [0:0] p_Result_s_reg_688;
wire   [42:0] in_shift_V_2_fu_223_p3;
reg   [42:0] in_shift_V_2_reg_693;
wire   [1:0] i_1_fu_237_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] out_bits_1_V_1_fu_409_p3;
wire   [0:0] exitcond1_fu_231_p2;
wire   [31:0] out_bits_1_V_2_fu_417_p3;
wire   [31:0] p_Result_6_fu_436_p5;
reg   [31:0] p_Result_6_reg_737;
wire   [1:0] i_2_fu_454_p2;
wire    ap_CS_fsm_state3;
wire   [1:0] i_3_fu_510_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] shift_2_fu_537_p2;
wire   [0:0] tmp_8_fu_504_p2;
wire   [42:0] in_shift_V_fu_582_p3;
reg   [31:0] out_bits_1_V_s_reg_112;
reg   [31:0] out_bits_0_V_s_reg_124;
reg   [1:0] i_reg_136;
wire   [1:0] ap_phi_mux_i1_phi_fu_151_p4;
reg   [1:0] i1_reg_147;
wire   [0:0] exitcond_fu_448_p2;
reg   [42:0] in_shift_reg_158;
wire   [0:0] tmp_1_fu_591_p2;
reg   [31:0] shift_reg_167;
reg   [1:0] i2_reg_178;
reg   [42:0] ap_phi_mux_p_Val2_s_phi_fu_192_p4;
reg   [31:0] ap_phi_mux_shift_1_phi_fu_202_p4;
reg   [31:0] c_2_fu_88;
reg   [31:0] c_0_fu_481_p3;
reg   [31:0] c_2_1_fu_92;
reg   [31:0] c_2_2_fu_96;
wire   [42:0] p_Val2_2_fu_217_p2;
wire   [0:0] tmp_12_fu_243_p1;
wire   [4:0] tmp_5_fu_247_p3;
wire   [5:0] tmp_5_cast_fu_255_p1;
wire   [5:0] Hi_assign_fu_259_p2;
wire   [4:0] Lo_assign_fu_269_p2;
wire   [31:0] Lo_assign_cast_fu_275_p1;
wire   [31:0] Hi_assign_cast_fu_265_p1;
wire   [5:0] tmp_14_fu_285_p1;
wire   [0:0] tmp_13_fu_279_p2;
wire   [5:0] tmp_16_fu_298_p2;
wire   [5:0] tmp_18_fu_310_p2;
reg   [42:0] tmp_15_fu_289_p4;
wire   [5:0] tmp_17_fu_304_p2;
wire   [5:0] tmp_19_fu_316_p3;
wire   [5:0] tmp_21_fu_331_p3;
wire   [5:0] tmp_22_fu_339_p2;
wire   [42:0] tmp_20_fu_324_p3;
wire   [42:0] tmp_23_fu_345_p1;
wire   [42:0] tmp_24_fu_349_p1;
wire   [42:0] tmp_25_fu_353_p2;
wire   [42:0] tmp_26_fu_359_p2;
wire   [0:0] cond_fu_371_p2;
wire   [42:0] p_Result_4_fu_365_p2;
wire   [15:0] tmp_28_fu_385_p1;
wire   [31:0] p_Val2_3_fu_377_p3;
wire   [16:0] tmp_3_fu_389_p3;
wire   [31:0] p_Result_5_fu_397_p5;
wire   [10:0] tmp_11_fu_425_p1;
wire   [11:0] tmp_fu_428_p3;
wire   [31:0] p_Val2_4_fu_460_p5;
reg   [31:0] p_Result_7_fu_471_p4;
wire   [31:0] sh_assign_fu_525_p5;
wire   [0:0] isNeg_fu_544_p3;
wire   [31:0] tmp_2_fu_552_p2;
wire   [31:0] sh_assign_1_fu_558_p3;
wire   [42:0] tmp_6_fu_566_p1;
wire   [42:0] tmp_s_fu_576_p2;
wire   [42:0] tmp_9_fu_570_p2;
wire   [7:0] prescale_cast_fu_597_p1;
wire   [7:0] tmp_4_fu_600_p2;
wire   [31:0] tmp_4_cast_fu_606_p1;
wire   [31:0] newexp_fu_610_p2;
wire   [0:0] tmp_30_fu_616_p3;
wire   [0:0] tmp_7_fu_624_p2;
wire   [0:0] or_cond_fu_629_p2;
wire   [22:0] phitmp1_fu_639_p4;
wire   [7:0] tmp_31_fu_635_p1;
wire   [7:0] out_exp_V_fu_657_p3;
wire   [22:0] p_Val2_5_fu_649_p3;
wire   [31:0] p_Result_8_fu_665_p4;
wire   [31:0] result_write_assign_fu_674_p1;
reg   [31:0] ap_return_preg;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_return_preg = 32'd0;
end

filter_mux_32_32_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
filter_mux_32_32_dEe_U48(
    .din0(out_bits_0_V_s_reg_124),
    .din1(out_bits_1_V_s_reg_112),
    .din2(p_Result_6_reg_737),
    .din3(i1_reg_147),
    .dout(p_Val2_4_fu_460_p5)
);

filter_mux_32_32_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
filter_mux_32_32_dEe_U49(
    .din0(c_2_1_fu_92),
    .din1(c_2_2_fu_96),
    .din2(c_2_fu_88),
    .din3(i2_reg_178),
    .dout(sh_assign_fu_525_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & ((tmp_8_fu_504_p2 == 1'd1) | (tmp_1_fu_591_p2 == 1'd0)))) begin
            ap_return_preg <= result_write_assign_fu_674_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i1_reg_147 <= i_2_fu_454_p2;
    end else if (((exitcond1_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_147 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_448_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i2_reg_178 <= 2'd0;
    end else if (((tmp_1_fu_591_p2 == 1'd1) & (tmp_8_fu_504_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i2_reg_178 <= i_3_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_231_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_136 <= i_1_fu_237_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_136 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_448_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_shift_reg_158 <= in_shift_V_2_reg_693;
    end else if (((tmp_1_fu_591_p2 == 1'd1) & (tmp_8_fu_504_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_shift_reg_158 <= in_shift_V_fu_582_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_448_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_167 <= 32'd0;
    end else if (((tmp_1_fu_591_p2 == 1'd1) & (tmp_8_fu_504_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shift_reg_167 <= shift_2_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_i1_phi_fu_151_p4 == 2'd0) & (exitcond_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_2_1_fu_92 <= c_0_fu_481_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_i1_phi_fu_151_p4 == 2'd1) & (exitcond_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_2_2_fu_96 <= c_0_fu_481_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(ap_phi_mux_i1_phi_fu_151_p4 == 2'd1) & ~(ap_phi_mux_i1_phi_fu_151_p4 == 2'd0) & (exitcond_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_2_fu_88 <= c_0_fu_481_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_shift_V_2_reg_693 <= in_shift_V_2_fu_223_p3;
        p_Result_s_reg_688 <= in_V[32'd42];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_231_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_bits_0_V_s_reg_124 <= out_bits_1_V_2_fu_417_p3;
        out_bits_1_V_s_reg_112 <= out_bits_1_V_1_fu_409_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Result_6_reg_737 <= p_Result_6_fu_436_p5;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & ((tmp_8_fu_504_p2 == 1'd1) | (tmp_1_fu_591_p2 == 1'd0))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if (((tmp_1_fu_591_p2 == 1'd0) & (tmp_8_fu_504_p2 == 1'd0))) begin
            ap_phi_mux_p_Val2_s_phi_fu_192_p4 = in_shift_V_fu_582_p3;
        end else if ((tmp_8_fu_504_p2 == 1'd1)) begin
            ap_phi_mux_p_Val2_s_phi_fu_192_p4 = in_shift_reg_158;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_192_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_192_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if (((tmp_1_fu_591_p2 == 1'd0) & (tmp_8_fu_504_p2 == 1'd0))) begin
            ap_phi_mux_shift_1_phi_fu_202_p4 = shift_2_fu_537_p2;
        end else if ((tmp_8_fu_504_p2 == 1'd1)) begin
            ap_phi_mux_shift_1_phi_fu_202_p4 = shift_reg_167;
        end else begin
            ap_phi_mux_shift_1_phi_fu_202_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_shift_1_phi_fu_202_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((tmp_8_fu_504_p2 == 1'd1) | (tmp_1_fu_591_p2 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((tmp_8_fu_504_p2 == 1'd1) | (tmp_1_fu_591_p2 == 1'd0)))) begin
        ap_return = result_write_assign_fu_674_p1;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_448_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((tmp_8_fu_504_p2 == 1'd1) | (tmp_1_fu_591_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_cast_fu_265_p1 = Hi_assign_fu_259_p2;

assign Hi_assign_fu_259_p2 = ($signed(6'd42) - $signed(tmp_5_cast_fu_255_p1));

assign Lo_assign_cast_fu_275_p1 = Lo_assign_fu_269_p2;

assign Lo_assign_fu_269_p2 = ($signed(5'd27) - $signed(tmp_5_fu_247_p3));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_phi_mux_i1_phi_fu_151_p4 = i1_reg_147;


always @ (p_Result_7_fu_471_p4) begin
    if (p_Result_7_fu_471_p4[0] == 1'b1) begin
        c_0_fu_481_p3 = 32'd0;
    end else if (p_Result_7_fu_471_p4[1] == 1'b1) begin
        c_0_fu_481_p3 = 32'd1;
    end else if (p_Result_7_fu_471_p4[2] == 1'b1) begin
        c_0_fu_481_p3 = 32'd2;
    end else if (p_Result_7_fu_471_p4[3] == 1'b1) begin
        c_0_fu_481_p3 = 32'd3;
    end else if (p_Result_7_fu_471_p4[4] == 1'b1) begin
        c_0_fu_481_p3 = 32'd4;
    end else if (p_Result_7_fu_471_p4[5] == 1'b1) begin
        c_0_fu_481_p3 = 32'd5;
    end else if (p_Result_7_fu_471_p4[6] == 1'b1) begin
        c_0_fu_481_p3 = 32'd6;
    end else if (p_Result_7_fu_471_p4[7] == 1'b1) begin
        c_0_fu_481_p3 = 32'd7;
    end else if (p_Result_7_fu_471_p4[8] == 1'b1) begin
        c_0_fu_481_p3 = 32'd8;
    end else if (p_Result_7_fu_471_p4[9] == 1'b1) begin
        c_0_fu_481_p3 = 32'd9;
    end else if (p_Result_7_fu_471_p4[10] == 1'b1) begin
        c_0_fu_481_p3 = 32'd10;
    end else if (p_Result_7_fu_471_p4[11] == 1'b1) begin
        c_0_fu_481_p3 = 32'd11;
    end else if (p_Result_7_fu_471_p4[12] == 1'b1) begin
        c_0_fu_481_p3 = 32'd12;
    end else if (p_Result_7_fu_471_p4[13] == 1'b1) begin
        c_0_fu_481_p3 = 32'd13;
    end else if (p_Result_7_fu_471_p4[14] == 1'b1) begin
        c_0_fu_481_p3 = 32'd14;
    end else if (p_Result_7_fu_471_p4[15] == 1'b1) begin
        c_0_fu_481_p3 = 32'd15;
    end else if (p_Result_7_fu_471_p4[16] == 1'b1) begin
        c_0_fu_481_p3 = 32'd16;
    end else if (p_Result_7_fu_471_p4[17] == 1'b1) begin
        c_0_fu_481_p3 = 32'd17;
    end else if (p_Result_7_fu_471_p4[18] == 1'b1) begin
        c_0_fu_481_p3 = 32'd18;
    end else if (p_Result_7_fu_471_p4[19] == 1'b1) begin
        c_0_fu_481_p3 = 32'd19;
    end else if (p_Result_7_fu_471_p4[20] == 1'b1) begin
        c_0_fu_481_p3 = 32'd20;
    end else if (p_Result_7_fu_471_p4[21] == 1'b1) begin
        c_0_fu_481_p3 = 32'd21;
    end else if (p_Result_7_fu_471_p4[22] == 1'b1) begin
        c_0_fu_481_p3 = 32'd22;
    end else if (p_Result_7_fu_471_p4[23] == 1'b1) begin
        c_0_fu_481_p3 = 32'd23;
    end else if (p_Result_7_fu_471_p4[24] == 1'b1) begin
        c_0_fu_481_p3 = 32'd24;
    end else if (p_Result_7_fu_471_p4[25] == 1'b1) begin
        c_0_fu_481_p3 = 32'd25;
    end else if (p_Result_7_fu_471_p4[26] == 1'b1) begin
        c_0_fu_481_p3 = 32'd26;
    end else if (p_Result_7_fu_471_p4[27] == 1'b1) begin
        c_0_fu_481_p3 = 32'd27;
    end else if (p_Result_7_fu_471_p4[28] == 1'b1) begin
        c_0_fu_481_p3 = 32'd28;
    end else if (p_Result_7_fu_471_p4[29] == 1'b1) begin
        c_0_fu_481_p3 = 32'd29;
    end else if (p_Result_7_fu_471_p4[30] == 1'b1) begin
        c_0_fu_481_p3 = 32'd30;
    end else if (p_Result_7_fu_471_p4[31] == 1'b1) begin
        c_0_fu_481_p3 = 32'd31;
    end else begin
        c_0_fu_481_p3 = 32'd32;
    end
end

assign cond_fu_371_p2 = ((i_reg_136 == 2'd0) ? 1'b1 : 1'b0);

assign exitcond1_fu_231_p2 = ((i_reg_136 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_448_p2 = ((i1_reg_147 == 2'd3) ? 1'b1 : 1'b0);

assign i_1_fu_237_p2 = (i_reg_136 + 2'd1);

assign i_2_fu_454_p2 = (i1_reg_147 + 2'd1);

assign i_3_fu_510_p2 = (i2_reg_178 + 2'd1);

assign in_shift_V_2_fu_223_p3 = ((p_Result_s_fu_209_p3[0:0] === 1'b1) ? p_Val2_2_fu_217_p2 : in_V);

assign in_shift_V_fu_582_p3 = ((isNeg_fu_544_p3[0:0] === 1'b1) ? tmp_s_fu_576_p2 : tmp_9_fu_570_p2);

assign isNeg_fu_544_p3 = sh_assign_fu_525_p5[32'd31];

assign newexp_fu_610_p2 = (tmp_4_cast_fu_606_p1 - ap_phi_mux_shift_1_phi_fu_202_p4);

assign or_cond_fu_629_p2 = (tmp_7_fu_624_p2 | tmp_30_fu_616_p3);

assign out_bits_1_V_1_fu_409_p3 = ((cond_fu_371_p2[0:0] === 1'b1) ? out_bits_1_V_s_reg_112 : p_Result_5_fu_397_p5);

assign out_bits_1_V_2_fu_417_p3 = ((cond_fu_371_p2[0:0] === 1'b1) ? p_Result_5_fu_397_p5 : out_bits_0_V_s_reg_124);

assign out_exp_V_fu_657_p3 = ((or_cond_fu_629_p2[0:0] === 1'b1) ? 8'd0 : tmp_31_fu_635_p1);

assign p_Result_4_fu_365_p2 = (tmp_26_fu_359_p2 & tmp_25_fu_353_p2);

assign p_Result_5_fu_397_p5 = {{tmp_3_fu_389_p3}, {p_Val2_3_fu_377_p3[14:0]}};

assign p_Result_6_fu_436_p5 = {{tmp_fu_428_p3}, {ap_const_lv32_0[19:0]}};

integer ap_tvar_int_0;

always @ (p_Val2_4_fu_460_p5) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_7_fu_471_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_7_fu_471_p4[ap_tvar_int_0] = p_Val2_4_fu_460_p5[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_8_fu_665_p4 = {{{p_Result_s_reg_688}, {out_exp_V_fu_657_p3}}, {p_Val2_5_fu_649_p3}};

assign p_Result_s_fu_209_p3 = in_V[32'd42];

assign p_Val2_2_fu_217_p2 = (43'd0 - in_V);

assign p_Val2_3_fu_377_p3 = ((cond_fu_371_p2[0:0] === 1'b1) ? out_bits_0_V_s_reg_124 : out_bits_1_V_s_reg_112);

assign p_Val2_5_fu_649_p3 = ((or_cond_fu_629_p2[0:0] === 1'b1) ? 23'd0 : phitmp1_fu_639_p4);

assign phitmp1_fu_639_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_192_p4[41:19]}};

assign prescale_cast_fu_597_p1 = prescale;

assign result_write_assign_fu_674_p1 = p_Result_8_fu_665_p4;

assign sh_assign_1_fu_558_p3 = ((isNeg_fu_544_p3[0:0] === 1'b1) ? tmp_2_fu_552_p2 : sh_assign_fu_525_p5);

assign shift_2_fu_537_p2 = (sh_assign_fu_525_p5 + shift_reg_167);

assign tmp_11_fu_425_p1 = in_shift_V_2_reg_693[10:0];

assign tmp_12_fu_243_p1 = i_reg_136[0:0];

assign tmp_13_fu_279_p2 = ((Lo_assign_cast_fu_275_p1 > Hi_assign_cast_fu_265_p1) ? 1'b1 : 1'b0);

assign tmp_14_fu_285_p1 = Lo_assign_fu_269_p2;

integer ap_tvar_int_1;

always @ (in_shift_V_2_reg_693) begin
    for (ap_tvar_int_1 = 43 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 42 - 0) begin
            tmp_15_fu_289_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_15_fu_289_p4[ap_tvar_int_1] = in_shift_V_2_reg_693[42 - ap_tvar_int_1];
        end
    end
end

assign tmp_16_fu_298_p2 = (tmp_14_fu_285_p1 - Hi_assign_fu_259_p2);

assign tmp_17_fu_304_p2 = ($signed(6'd42) - $signed(tmp_14_fu_285_p1));

assign tmp_18_fu_310_p2 = (Hi_assign_fu_259_p2 - tmp_14_fu_285_p1);

assign tmp_19_fu_316_p3 = ((tmp_13_fu_279_p2[0:0] === 1'b1) ? tmp_16_fu_298_p2 : tmp_18_fu_310_p2);

assign tmp_1_fu_591_p2 = ((sh_assign_fu_525_p5 == 32'd16) ? 1'b1 : 1'b0);

assign tmp_20_fu_324_p3 = ((tmp_13_fu_279_p2[0:0] === 1'b1) ? tmp_15_fu_289_p4 : in_shift_V_2_reg_693);

assign tmp_21_fu_331_p3 = ((tmp_13_fu_279_p2[0:0] === 1'b1) ? tmp_17_fu_304_p2 : tmp_14_fu_285_p1);

assign tmp_22_fu_339_p2 = ($signed(6'd42) - $signed(tmp_19_fu_316_p3));

assign tmp_23_fu_345_p1 = tmp_21_fu_331_p3;

assign tmp_24_fu_349_p1 = tmp_22_fu_339_p2;

assign tmp_25_fu_353_p2 = tmp_20_fu_324_p3 >> tmp_23_fu_345_p1;

assign tmp_26_fu_359_p2 = 43'd8796093022207 >> tmp_24_fu_349_p1;

assign tmp_28_fu_385_p1 = p_Result_4_fu_365_p2[15:0];

assign tmp_2_fu_552_p2 = (32'd0 - sh_assign_fu_525_p5);

assign tmp_30_fu_616_p3 = newexp_fu_610_p2[32'd31];

assign tmp_31_fu_635_p1 = newexp_fu_610_p2[7:0];

assign tmp_3_fu_389_p3 = {{tmp_28_fu_385_p1}, {1'd1}};

assign tmp_4_cast_fu_606_p1 = tmp_4_fu_600_p2;

assign tmp_4_fu_600_p2 = ($signed(8'd129) - $signed(prescale_cast_fu_597_p1));

assign tmp_5_cast_fu_255_p1 = tmp_5_fu_247_p3;

assign tmp_5_fu_247_p3 = {{tmp_12_fu_243_p1}, {4'd0}};

assign tmp_6_fu_566_p1 = sh_assign_1_fu_558_p3;

assign tmp_7_fu_624_p2 = ((in_V == 43'd0) ? 1'b1 : 1'b0);

assign tmp_8_fu_504_p2 = ((i2_reg_178 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_9_fu_570_p2 = in_shift_reg_158 << tmp_6_fu_566_p1;

assign tmp_fu_428_p3 = {{tmp_11_fu_425_p1}, {1'd1}};

assign tmp_s_fu_576_p2 = in_shift_reg_158 >> tmp_6_fu_566_p1;

endmodule //scaled_fixed2ieee
