// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="filter,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku5p-ffvb676-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.857800,HLS_SYN_LAT=103,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=140,HLS_SYN_FF=11795,HLS_SYN_LUT=15101}" *)

module filter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        agg_result_M0,
        agg_result_M0_ap_vld,
        agg_result_M1,
        agg_result_M1_ap_vld,
        agg_result_M2,
        agg_result_M2_ap_vld,
        agg_result_A_a1,
        agg_result_A_a1_ap_vld,
        agg_result_A_a2,
        agg_result_A_a2_ap_vld,
        agg_result_A_a3,
        agg_result_A_a3_ap_vld,
        agg_result_A_b1,
        agg_result_A_b1_ap_vld,
        agg_result_A_b2,
        agg_result_A_b2_ap_vld,
        agg_result_A_b3,
        agg_result_A_b3_ap_vld,
        agg_result_A_c1,
        agg_result_A_c1_ap_vld,
        agg_result_A_c2,
        agg_result_A_c2_ap_vld,
        agg_result_A_c3,
        agg_result_A_c3_ap_vld,
        agg_result_P_a1,
        agg_result_P_a1_ap_vld,
        agg_result_P_a2,
        agg_result_P_a2_ap_vld,
        agg_result_P_a3,
        agg_result_P_a3_ap_vld,
        agg_result_P_b1,
        agg_result_P_b1_ap_vld,
        agg_result_P_b2,
        agg_result_P_b2_ap_vld,
        agg_result_P_b3,
        agg_result_P_b3_ap_vld,
        agg_result_P_c1,
        agg_result_P_c1_ap_vld,
        agg_result_P_c2,
        agg_result_P_c2_ap_vld,
        agg_result_P_c3,
        agg_result_P_c3_ap_vld,
        agg_result_Q_a1,
        agg_result_Q_a1_ap_vld,
        agg_result_Q_a2,
        agg_result_Q_a2_ap_vld,
        agg_result_Q_a3,
        agg_result_Q_a3_ap_vld,
        agg_result_Q_b1,
        agg_result_Q_b1_ap_vld,
        agg_result_Q_b2,
        agg_result_Q_b2_ap_vld,
        agg_result_Q_b3,
        agg_result_Q_b3_ap_vld,
        agg_result_Q_c1,
        agg_result_Q_c1_ap_vld,
        agg_result_Q_c2,
        agg_result_Q_c2_ap_vld,
        agg_result_Q_c3,
        agg_result_Q_c3_ap_vld,
        agg_result_MU,
        agg_result_MU_ap_vld,
        agg_result_H0,
        agg_result_H0_ap_vld,
        agg_result_H1,
        agg_result_H1_ap_vld,
        agg_result_H2,
        agg_result_H2_ap_vld,
        agg_result_S,
        agg_result_S_ap_vld,
        agg_result_K0,
        agg_result_K0_ap_vld,
        agg_result_K1,
        agg_result_K1_ap_vld,
        agg_result_K2,
        agg_result_K2_ap_vld,
        agg_result_Y,
        agg_result_Y_ap_vld,
        value_M0,
        value_M1,
        value_M2,
        value_A_a1,
        value_A_a2,
        value_A_a3,
        value_A_b1,
        value_A_b2,
        value_A_b3,
        value_A_c1,
        value_A_c2,
        value_A_c3,
        value_P_a1,
        value_P_a2,
        value_P_a3,
        value_P_b1,
        value_P_b2,
        value_P_b3,
        value_P_c1,
        value_P_c2,
        value_P_c3,
        value_Q_a1,
        value_Q_a2,
        value_Q_a3,
        value_Q_b1,
        value_Q_b2,
        value_Q_b3,
        value_Q_c1,
        value_Q_c2,
        value_Q_c3,
        value_MU,
        value_H0,
        value_H1,
        value_H2,
        value_S,
        value_K0,
        value_K1,
        value_K2,
        value_Y
);

parameter    ap_ST_fsm_state1 = 47'd1;
parameter    ap_ST_fsm_state2 = 47'd2;
parameter    ap_ST_fsm_state3 = 47'd4;
parameter    ap_ST_fsm_state4 = 47'd8;
parameter    ap_ST_fsm_state5 = 47'd16;
parameter    ap_ST_fsm_state6 = 47'd32;
parameter    ap_ST_fsm_state7 = 47'd64;
parameter    ap_ST_fsm_state8 = 47'd128;
parameter    ap_ST_fsm_state9 = 47'd256;
parameter    ap_ST_fsm_state10 = 47'd512;
parameter    ap_ST_fsm_state11 = 47'd1024;
parameter    ap_ST_fsm_state12 = 47'd2048;
parameter    ap_ST_fsm_state13 = 47'd4096;
parameter    ap_ST_fsm_state14 = 47'd8192;
parameter    ap_ST_fsm_state15 = 47'd16384;
parameter    ap_ST_fsm_state16 = 47'd32768;
parameter    ap_ST_fsm_state17 = 47'd65536;
parameter    ap_ST_fsm_state18 = 47'd131072;
parameter    ap_ST_fsm_state19 = 47'd262144;
parameter    ap_ST_fsm_state20 = 47'd524288;
parameter    ap_ST_fsm_state21 = 47'd1048576;
parameter    ap_ST_fsm_state22 = 47'd2097152;
parameter    ap_ST_fsm_state23 = 47'd4194304;
parameter    ap_ST_fsm_state24 = 47'd8388608;
parameter    ap_ST_fsm_state25 = 47'd16777216;
parameter    ap_ST_fsm_state26 = 47'd33554432;
parameter    ap_ST_fsm_state27 = 47'd67108864;
parameter    ap_ST_fsm_state28 = 47'd134217728;
parameter    ap_ST_fsm_state29 = 47'd268435456;
parameter    ap_ST_fsm_state30 = 47'd536870912;
parameter    ap_ST_fsm_state31 = 47'd1073741824;
parameter    ap_ST_fsm_state32 = 47'd2147483648;
parameter    ap_ST_fsm_state33 = 47'd4294967296;
parameter    ap_ST_fsm_state34 = 47'd8589934592;
parameter    ap_ST_fsm_state35 = 47'd17179869184;
parameter    ap_ST_fsm_state36 = 47'd34359738368;
parameter    ap_ST_fsm_state37 = 47'd68719476736;
parameter    ap_ST_fsm_state38 = 47'd137438953472;
parameter    ap_ST_fsm_state39 = 47'd274877906944;
parameter    ap_ST_fsm_state40 = 47'd549755813888;
parameter    ap_ST_fsm_state41 = 47'd1099511627776;
parameter    ap_ST_fsm_state42 = 47'd2199023255552;
parameter    ap_ST_fsm_state43 = 47'd4398046511104;
parameter    ap_ST_fsm_state44 = 47'd8796093022208;
parameter    ap_ST_fsm_state45 = 47'd17592186044416;
parameter    ap_ST_fsm_state46 = 47'd35184372088832;
parameter    ap_ST_fsm_state47 = 47'd70368744177664;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] agg_result_M0;
output   agg_result_M0_ap_vld;
output  [31:0] agg_result_M1;
output   agg_result_M1_ap_vld;
output  [31:0] agg_result_M2;
output   agg_result_M2_ap_vld;
output  [31:0] agg_result_A_a1;
output   agg_result_A_a1_ap_vld;
output  [31:0] agg_result_A_a2;
output   agg_result_A_a2_ap_vld;
output  [31:0] agg_result_A_a3;
output   agg_result_A_a3_ap_vld;
output  [31:0] agg_result_A_b1;
output   agg_result_A_b1_ap_vld;
output  [31:0] agg_result_A_b2;
output   agg_result_A_b2_ap_vld;
output  [31:0] agg_result_A_b3;
output   agg_result_A_b3_ap_vld;
output  [31:0] agg_result_A_c1;
output   agg_result_A_c1_ap_vld;
output  [31:0] agg_result_A_c2;
output   agg_result_A_c2_ap_vld;
output  [31:0] agg_result_A_c3;
output   agg_result_A_c3_ap_vld;
output  [31:0] agg_result_P_a1;
output   agg_result_P_a1_ap_vld;
output  [31:0] agg_result_P_a2;
output   agg_result_P_a2_ap_vld;
output  [31:0] agg_result_P_a3;
output   agg_result_P_a3_ap_vld;
output  [31:0] agg_result_P_b1;
output   agg_result_P_b1_ap_vld;
output  [31:0] agg_result_P_b2;
output   agg_result_P_b2_ap_vld;
output  [31:0] agg_result_P_b3;
output   agg_result_P_b3_ap_vld;
output  [31:0] agg_result_P_c1;
output   agg_result_P_c1_ap_vld;
output  [31:0] agg_result_P_c2;
output   agg_result_P_c2_ap_vld;
output  [31:0] agg_result_P_c3;
output   agg_result_P_c3_ap_vld;
output  [31:0] agg_result_Q_a1;
output   agg_result_Q_a1_ap_vld;
output  [31:0] agg_result_Q_a2;
output   agg_result_Q_a2_ap_vld;
output  [31:0] agg_result_Q_a3;
output   agg_result_Q_a3_ap_vld;
output  [31:0] agg_result_Q_b1;
output   agg_result_Q_b1_ap_vld;
output  [31:0] agg_result_Q_b2;
output   agg_result_Q_b2_ap_vld;
output  [31:0] agg_result_Q_b3;
output   agg_result_Q_b3_ap_vld;
output  [31:0] agg_result_Q_c1;
output   agg_result_Q_c1_ap_vld;
output  [31:0] agg_result_Q_c2;
output   agg_result_Q_c2_ap_vld;
output  [31:0] agg_result_Q_c3;
output   agg_result_Q_c3_ap_vld;
output  [31:0] agg_result_MU;
output   agg_result_MU_ap_vld;
output  [31:0] agg_result_H0;
output   agg_result_H0_ap_vld;
output  [31:0] agg_result_H1;
output   agg_result_H1_ap_vld;
output  [31:0] agg_result_H2;
output   agg_result_H2_ap_vld;
output  [31:0] agg_result_S;
output   agg_result_S_ap_vld;
output  [31:0] agg_result_K0;
output   agg_result_K0_ap_vld;
output  [31:0] agg_result_K1;
output   agg_result_K1_ap_vld;
output  [31:0] agg_result_K2;
output   agg_result_K2_ap_vld;
output  [31:0] agg_result_Y;
output   agg_result_Y_ap_vld;
input  [31:0] value_M0;
input  [31:0] value_M1;
input  [31:0] value_M2;
input  [31:0] value_A_a1;
input  [31:0] value_A_a2;
input  [31:0] value_A_a3;
input  [31:0] value_A_b1;
input  [31:0] value_A_b2;
input  [31:0] value_A_b3;
input  [31:0] value_A_c1;
input  [31:0] value_A_c2;
input  [31:0] value_A_c3;
input  [31:0] value_P_a1;
input  [31:0] value_P_a2;
input  [31:0] value_P_a3;
input  [31:0] value_P_b1;
input  [31:0] value_P_b2;
input  [31:0] value_P_b3;
input  [31:0] value_P_c1;
input  [31:0] value_P_c2;
input  [31:0] value_P_c3;
input  [31:0] value_Q_a1;
input  [31:0] value_Q_a2;
input  [31:0] value_Q_a3;
input  [31:0] value_Q_b1;
input  [31:0] value_Q_b2;
input  [31:0] value_Q_b3;
input  [31:0] value_Q_c1;
input  [31:0] value_Q_c2;
input  [31:0] value_Q_c3;
input  [31:0] value_MU;
input  [31:0] value_H0;
input  [31:0] value_H1;
input  [31:0] value_H2;
input  [31:0] value_S;
input  [31:0] value_K0;
input  [31:0] value_K1;
input  [31:0] value_K2;
input  [31:0] value_Y;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg agg_result_M0_ap_vld;
reg agg_result_M1_ap_vld;
reg agg_result_M2_ap_vld;
reg agg_result_A_a1_ap_vld;
reg agg_result_A_a2_ap_vld;
reg agg_result_A_a3_ap_vld;
reg agg_result_A_b1_ap_vld;
reg agg_result_A_b2_ap_vld;
reg agg_result_A_b3_ap_vld;
reg agg_result_A_c1_ap_vld;
reg agg_result_A_c2_ap_vld;
reg agg_result_A_c3_ap_vld;
reg agg_result_P_a1_ap_vld;
reg agg_result_P_a2_ap_vld;
reg agg_result_P_a3_ap_vld;
reg agg_result_P_b1_ap_vld;
reg agg_result_P_b2_ap_vld;
reg agg_result_P_b3_ap_vld;
reg agg_result_P_c1_ap_vld;
reg agg_result_P_c2_ap_vld;
reg agg_result_P_c3_ap_vld;
reg agg_result_Q_a1_ap_vld;
reg agg_result_Q_a2_ap_vld;
reg agg_result_Q_a3_ap_vld;
reg agg_result_Q_b1_ap_vld;
reg agg_result_Q_b2_ap_vld;
reg agg_result_Q_b3_ap_vld;
reg agg_result_Q_c1_ap_vld;
reg agg_result_Q_c2_ap_vld;
reg agg_result_Q_c3_ap_vld;
reg agg_result_MU_ap_vld;
reg agg_result_H0_ap_vld;
reg agg_result_H1_ap_vld;
reg agg_result_H2_ap_vld;
reg agg_result_S_ap_vld;
reg agg_result_K0_ap_vld;
reg agg_result_K1_ap_vld;
reg agg_result_K2_ap_vld;
reg agg_result_Y_ap_vld;

(* fsm_encoding = "none" *) reg   [46:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_750_p2;
reg   [31:0] reg_843;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state43;
wire   [31:0] grp_fu_756_p2;
reg   [31:0] reg_855;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state21;
reg   [31:0] reg_864;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state25;
wire   [31:0] grp_fu_691_p2;
reg   [31:0] reg_872;
wire    ap_CS_fsm_state10;
wire    grp_operator_mul_fu_648_ap_idle;
wire    grp_operator_mul_fu_648_ap_ready;
wire    grp_operator_mul_fu_648_ap_done;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state39;
reg   [31:0] reg_883;
wire    ap_CS_fsm_state13;
reg   [31:0] reg_894;
wire    ap_CS_fsm_state11;
wire    grp_cordic_sincos_generi_fu_682_ap_idle;
wire    grp_cordic_sincos_generi_fu_682_ap_ready;
wire    grp_cordic_sincos_generi_fu_682_ap_done;
reg    ap_block_state11_on_subcall_done;
reg   [31:0] reg_900;
reg   [31:0] reg_906;
reg   [31:0] reg_912;
reg   [31:0] reg_918;
reg   [31:0] reg_924;
reg   [31:0] reg_930;
reg   [31:0] reg_936;
reg   [31:0] reg_942;
wire   [31:0] grp_fu_768_p2;
reg   [31:0] reg_948;
wire   [31:0] grp_fu_772_p2;
reg   [31:0] reg_958;
wire   [31:0] grp_fu_697_p2;
reg   [31:0] reg_965;
wire   [31:0] grp_fu_777_p2;
reg   [31:0] reg_975;
wire    ap_CS_fsm_state4;
reg   [31:0] tmp_12_reg_1044;
wire    ap_CS_fsm_state8;
reg   [31:0] s_out_reg_1123;
reg   [31:0] c_out_reg_1132;
wire    ap_CS_fsm_state12;
reg   [31:0] tempAdd_a1_reg_1157;
reg   [31:0] tempAdd_a2_reg_1163;
wire   [31:0] grp_fu_702_p2;
reg   [31:0] tempAdd_b1_reg_1169;
wire   [31:0] grp_fu_707_p2;
reg   [31:0] tempAdd_b2_reg_1175;
wire    ap_CS_fsm_state16;
reg   [31:0] tempAdd_a3_reg_1201;
wire    ap_CS_fsm_state19;
reg   [31:0] tempAdd_b3_reg_1207;
reg   [31:0] tempAdd_c1_reg_1213;
reg   [31:0] tempAdd_c2_reg_1219;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state22;
reg   [31:0] tempAdd_c3_reg_1235;
wire    ap_CS_fsm_state23;
reg   [31:0] tmp_25_reg_1241;
reg   [31:0] tmp_32_reg_1246;
reg   [31:0] temp2_reg_1252;
wire    ap_CS_fsm_state29;
reg   [31:0] value_M0_buf_assign_5_reg_1262;
wire   [31:0] grp_fu_782_p2;
reg   [31:0] tempMat_b3_reg_1269;
wire   [31:0] grp_fu_786_p2;
reg   [31:0] tempMat_c1_reg_1274;
wire   [31:0] grp_fu_790_p2;
reg   [31:0] tempMat_c2_reg_1279;
wire   [31:0] grp_fu_794_p2;
reg   [31:0] tempMat_c3_reg_1284;
wire    grp_operator_mul_fu_648_ap_start;
reg   [31:0] grp_operator_mul_fu_648_mat3_a1_read;
reg   [31:0] grp_operator_mul_fu_648_mat3_a2_read;
reg   [31:0] grp_operator_mul_fu_648_mat3_a3_read;
reg   [31:0] grp_operator_mul_fu_648_mat3_b1_read;
reg   [31:0] grp_operator_mul_fu_648_mat3_b2_read;
reg   [31:0] grp_operator_mul_fu_648_mat3_b3_read;
reg   [31:0] grp_operator_mul_fu_648_mat3_c1_read;
reg   [31:0] grp_operator_mul_fu_648_mat3_c2_read;
reg   [31:0] grp_operator_mul_fu_648_mat3_c3_read;
reg   [31:0] grp_operator_mul_fu_648_other_a1_read;
reg   [31:0] grp_operator_mul_fu_648_other_a2_read;
reg   [31:0] grp_operator_mul_fu_648_other_a3_read;
reg   [31:0] grp_operator_mul_fu_648_other_b1_read;
reg   [31:0] grp_operator_mul_fu_648_other_b2_read;
reg   [31:0] grp_operator_mul_fu_648_other_b3_read;
reg   [31:0] grp_operator_mul_fu_648_other_c1_read;
reg   [31:0] grp_operator_mul_fu_648_other_c2_read;
reg   [31:0] grp_operator_mul_fu_648_other_c3_read;
wire   [31:0] grp_operator_mul_fu_648_ap_return_0;
wire   [31:0] grp_operator_mul_fu_648_ap_return_1;
wire   [31:0] grp_operator_mul_fu_648_ap_return_2;
wire   [31:0] grp_operator_mul_fu_648_ap_return_3;
wire   [31:0] grp_operator_mul_fu_648_ap_return_4;
wire   [31:0] grp_operator_mul_fu_648_ap_return_5;
wire   [31:0] grp_operator_mul_fu_648_ap_return_6;
wire   [31:0] grp_operator_mul_fu_648_ap_return_7;
wire   [31:0] grp_operator_mul_fu_648_ap_return_8;
wire    grp_cordic_sincos_generi_fu_682_ap_start;
wire   [31:0] grp_cordic_sincos_generi_fu_682_ap_return_0;
wire   [31:0] grp_cordic_sincos_generi_fu_682_ap_return_1;
reg    grp_operator_mul_fu_648_ap_start_reg;
reg    grp_cordic_sincos_generi_fu_682_ap_start_reg;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state47;
wire   [31:0] grp_fu_725_p2;
wire   [31:0] grp_fu_730_p2;
wire   [31:0] grp_fu_735_p2;
wire   [31:0] grp_fu_740_p2;
wire   [31:0] grp_fu_745_p2;
reg   [31:0] grp_fu_691_p0;
reg   [31:0] grp_fu_691_p1;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state44;
reg   [31:0] grp_fu_697_p0;
reg   [31:0] grp_fu_697_p1;
reg   [31:0] grp_fu_702_p0;
reg   [31:0] grp_fu_702_p1;
reg   [31:0] grp_fu_707_p0;
reg   [31:0] grp_fu_707_p1;
reg   [31:0] grp_fu_750_p0;
reg   [31:0] grp_fu_750_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state24;
reg   [31:0] grp_fu_756_p0;
reg   [31:0] grp_fu_756_p1;
reg   [31:0] grp_fu_768_p0;
reg   [31:0] grp_fu_768_p1;
reg   [31:0] grp_fu_772_p0;
reg   [31:0] grp_fu_772_p1;
reg   [31:0] grp_fu_777_p0;
reg   [31:0] grp_fu_777_p1;
reg   [1:0] grp_fu_691_opcode;
reg    grp_fu_691_ce;
reg   [1:0] grp_fu_697_opcode;
reg   [1:0] grp_fu_702_opcode;
reg   [1:0] grp_fu_707_opcode;
reg   [46:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 47'd1;
#0 grp_operator_mul_fu_648_ap_start_reg = 1'b0;
#0 grp_cordic_sincos_generi_fu_682_ap_start_reg = 1'b0;
end

operator_mul grp_operator_mul_fu_648(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_operator_mul_fu_648_ap_start),
    .ap_done(grp_operator_mul_fu_648_ap_done),
    .ap_idle(grp_operator_mul_fu_648_ap_idle),
    .ap_ready(grp_operator_mul_fu_648_ap_ready),
    .mat3_a1_read(grp_operator_mul_fu_648_mat3_a1_read),
    .mat3_a2_read(grp_operator_mul_fu_648_mat3_a2_read),
    .mat3_a3_read(grp_operator_mul_fu_648_mat3_a3_read),
    .mat3_b1_read(grp_operator_mul_fu_648_mat3_b1_read),
    .mat3_b2_read(grp_operator_mul_fu_648_mat3_b2_read),
    .mat3_b3_read(grp_operator_mul_fu_648_mat3_b3_read),
    .mat3_c1_read(grp_operator_mul_fu_648_mat3_c1_read),
    .mat3_c2_read(grp_operator_mul_fu_648_mat3_c2_read),
    .mat3_c3_read(grp_operator_mul_fu_648_mat3_c3_read),
    .other_a1_read(grp_operator_mul_fu_648_other_a1_read),
    .other_a2_read(grp_operator_mul_fu_648_other_a2_read),
    .other_a3_read(grp_operator_mul_fu_648_other_a3_read),
    .other_b1_read(grp_operator_mul_fu_648_other_b1_read),
    .other_b2_read(grp_operator_mul_fu_648_other_b2_read),
    .other_b3_read(grp_operator_mul_fu_648_other_b3_read),
    .other_c1_read(grp_operator_mul_fu_648_other_c1_read),
    .other_c2_read(grp_operator_mul_fu_648_other_c2_read),
    .other_c3_read(grp_operator_mul_fu_648_other_c3_read),
    .ap_return_0(grp_operator_mul_fu_648_ap_return_0),
    .ap_return_1(grp_operator_mul_fu_648_ap_return_1),
    .ap_return_2(grp_operator_mul_fu_648_ap_return_2),
    .ap_return_3(grp_operator_mul_fu_648_ap_return_3),
    .ap_return_4(grp_operator_mul_fu_648_ap_return_4),
    .ap_return_5(grp_operator_mul_fu_648_ap_return_5),
    .ap_return_6(grp_operator_mul_fu_648_ap_return_6),
    .ap_return_7(grp_operator_mul_fu_648_ap_return_7),
    .ap_return_8(grp_operator_mul_fu_648_ap_return_8)
);

cordic_sincos_generi grp_cordic_sincos_generi_fu_682(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_cordic_sincos_generi_fu_682_ap_start),
    .ap_done(grp_cordic_sincos_generi_fu_682_ap_done),
    .ap_idle(grp_cordic_sincos_generi_fu_682_ap_idle),
    .ap_ready(grp_cordic_sincos_generi_fu_682_ap_ready),
    .t_in(reg_872),
    .ap_return_0(grp_cordic_sincos_generi_fu_682_ap_return_0),
    .ap_return_1(grp_cordic_sincos_generi_fu_682_ap_return_1)
);

filter_faddfsub_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_faddfsub_3g8j_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_691_p0),
    .din1(grp_fu_691_p1),
    .opcode(grp_fu_691_opcode),
    .ce(grp_fu_691_ce),
    .dout(grp_fu_691_p2)
);

filter_faddfsub_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_faddfsub_3g8j_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_697_p0),
    .din1(grp_fu_697_p1),
    .opcode(grp_fu_697_opcode),
    .ce(1'b1),
    .dout(grp_fu_697_p2)
);

filter_faddfsub_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_faddfsub_3g8j_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_702_p0),
    .din1(grp_fu_702_p1),
    .opcode(grp_fu_702_opcode),
    .ce(1'b1),
    .dout(grp_fu_702_p2)
);

filter_faddfsub_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_faddfsub_3g8j_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_707_p0),
    .din1(grp_fu_707_p1),
    .opcode(grp_fu_707_opcode),
    .ce(1'b1),
    .dout(grp_fu_707_p2)
);

filter_fsub_32ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_fsub_32ns_hbi_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tempAdd_b2_reg_1175),
    .din1(reg_975),
    .ce(1'b1),
    .dout(grp_fu_725_p2)
);

filter_fsub_32ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_fsub_32ns_hbi_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tempAdd_b3_reg_1207),
    .din1(tempMat_b3_reg_1269),
    .ce(1'b1),
    .dout(grp_fu_730_p2)
);

filter_fsub_32ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_fsub_32ns_hbi_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tempAdd_c1_reg_1213),
    .din1(tempMat_c1_reg_1274),
    .ce(1'b1),
    .dout(grp_fu_735_p2)
);

filter_fsub_32ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_fsub_32ns_hbi_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tempAdd_c2_reg_1219),
    .din1(tempMat_c2_reg_1279),
    .ce(1'b1),
    .dout(grp_fu_740_p2)
);

filter_fsub_32ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_fsub_32ns_hbi_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tempAdd_c3_reg_1235),
    .din1(tempMat_c3_reg_1284),
    .ce(1'b1),
    .dout(grp_fu_745_p2)
);

filter_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_fmul_32ns_cud_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_750_p0),
    .din1(grp_fu_750_p1),
    .ce(1'b1),
    .dout(grp_fu_750_p2)
);

filter_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_fmul_32ns_cud_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_756_p0),
    .din1(grp_fu_756_p1),
    .ce(1'b1),
    .dout(grp_fu_756_p2)
);

filter_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_fmul_32ns_cud_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_768_p0),
    .din1(grp_fu_768_p1),
    .ce(1'b1),
    .dout(grp_fu_768_p2)
);

filter_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_fmul_32ns_cud_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_772_p0),
    .din1(grp_fu_772_p1),
    .ce(1'b1),
    .dout(grp_fu_772_p2)
);

filter_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_fmul_32ns_cud_U69(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_777_p0),
    .din1(grp_fu_777_p1),
    .ce(1'b1),
    .dout(grp_fu_777_p2)
);

filter_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_fmul_32ns_cud_U70(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_855),
    .din1(temp2_reg_1252),
    .ce(1'b1),
    .dout(grp_fu_782_p2)
);

filter_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_fmul_32ns_cud_U71(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_948),
    .din1(reg_883),
    .ce(1'b1),
    .dout(grp_fu_786_p2)
);

filter_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_fmul_32ns_cud_U72(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_948),
    .din1(reg_965),
    .ce(1'b1),
    .dout(grp_fu_790_p2)
);

filter_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter_fmul_32ns_cud_U73(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_948),
    .din1(temp2_reg_1252),
    .ce(1'b1),
    .dout(grp_fu_794_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_cordic_sincos_generi_fu_682_ap_start_reg <= 1'b0;
    end else begin
        if (((grp_operator_mul_fu_648_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            grp_cordic_sincos_generi_fu_682_ap_start_reg <= 1'b1;
        end else if ((grp_cordic_sincos_generi_fu_682_ap_ready == 1'b1)) begin
            grp_cordic_sincos_generi_fu_682_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_operator_mul_fu_648_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) | ((grp_operator_mul_fu_648_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
            grp_operator_mul_fu_648_ap_start_reg <= 1'b1;
        end else if ((grp_operator_mul_fu_648_ap_ready == 1'b1)) begin
            grp_operator_mul_fu_648_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11))) begin
        c_out_reg_1132 <= grp_cordic_sincos_generi_fu_682_ap_return_1;
        s_out_reg_1123 <= grp_cordic_sincos_generi_fu_682_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_843 <= grp_fu_750_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_855 <= grp_fu_756_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_864 <= grp_fu_750_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state6) | ((grp_operator_mul_fu_648_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        reg_872 <= grp_fu_691_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state21))) begin
        reg_883 <= grp_fu_691_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11)) | ((grp_operator_mul_fu_648_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        reg_894 <= grp_operator_mul_fu_648_ap_return_0;
        reg_900 <= grp_operator_mul_fu_648_ap_return_1;
        reg_906 <= grp_operator_mul_fu_648_ap_return_2;
        reg_912 <= grp_operator_mul_fu_648_ap_return_3;
        reg_918 <= grp_operator_mul_fu_648_ap_return_4;
        reg_924 <= grp_operator_mul_fu_648_ap_return_5;
        reg_930 <= grp_operator_mul_fu_648_ap_return_6;
        reg_936 <= grp_operator_mul_fu_648_ap_return_7;
        reg_942 <= grp_operator_mul_fu_648_ap_return_8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27))) begin
        reg_948 <= grp_fu_768_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state43))) begin
        reg_958 <= grp_fu_772_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state21))) begin
        reg_965 <= grp_fu_697_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state43))) begin
        reg_975 <= grp_fu_777_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        temp2_reg_1252 <= grp_fu_691_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tempAdd_a1_reg_1157 <= grp_fu_691_p2;
        tempAdd_a2_reg_1163 <= grp_fu_697_p2;
        tempAdd_b1_reg_1169 <= grp_fu_702_p2;
        tempAdd_b2_reg_1175 <= grp_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tempAdd_a3_reg_1201 <= grp_fu_691_p2;
        tempAdd_b3_reg_1207 <= grp_fu_697_p2;
        tempAdd_c1_reg_1213 <= grp_fu_702_p2;
        tempAdd_c2_reg_1219 <= grp_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tempAdd_c3_reg_1235 <= grp_fu_691_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        tempMat_b3_reg_1269 <= grp_fu_782_p2;
        tempMat_c1_reg_1274 <= grp_fu_786_p2;
        tempMat_c2_reg_1279 <= grp_fu_790_p2;
        tempMat_c3_reg_1284 <= grp_fu_794_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_12_reg_1044 <= grp_fu_756_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_25_reg_1241 <= grp_fu_702_p2;
        tmp_32_reg_1246 <= grp_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        value_M0_buf_assign_5_reg_1262 <= grp_fu_697_p2;
    end
end

always @ (*) begin
    if (((grp_operator_mul_fu_648_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        agg_result_A_a1_ap_vld = 1'b1;
    end else begin
        agg_result_A_a1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_operator_mul_fu_648_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        agg_result_A_a2_ap_vld = 1'b1;
    end else begin
        agg_result_A_a2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_operator_mul_fu_648_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        agg_result_A_a3_ap_vld = 1'b1;
    end else begin
        agg_result_A_a3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_operator_mul_fu_648_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        agg_result_A_b1_ap_vld = 1'b1;
    end else begin
        agg_result_A_b1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_operator_mul_fu_648_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        agg_result_A_b2_ap_vld = 1'b1;
    end else begin
        agg_result_A_b2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_operator_mul_fu_648_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        agg_result_A_b3_ap_vld = 1'b1;
    end else begin
        agg_result_A_b3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_operator_mul_fu_648_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        agg_result_A_c1_ap_vld = 1'b1;
    end else begin
        agg_result_A_c1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_operator_mul_fu_648_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        agg_result_A_c2_ap_vld = 1'b1;
    end else begin
        agg_result_A_c2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_operator_mul_fu_648_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        agg_result_A_c3_ap_vld = 1'b1;
    end else begin
        agg_result_A_c3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        agg_result_H0_ap_vld = 1'b1;
    end else begin
        agg_result_H0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        agg_result_H1_ap_vld = 1'b1;
    end else begin
        agg_result_H1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        agg_result_H2_ap_vld = 1'b1;
    end else begin
        agg_result_H2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        agg_result_K0_ap_vld = 1'b1;
    end else begin
        agg_result_K0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        agg_result_K1_ap_vld = 1'b1;
    end else begin
        agg_result_K1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        agg_result_K2_ap_vld = 1'b1;
    end else begin
        agg_result_K2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        agg_result_M0_ap_vld = 1'b1;
    end else begin
        agg_result_M0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        agg_result_M1_ap_vld = 1'b1;
    end else begin
        agg_result_M1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        agg_result_M2_ap_vld = 1'b1;
    end else begin
        agg_result_M2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        agg_result_MU_ap_vld = 1'b1;
    end else begin
        agg_result_MU_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        agg_result_P_a1_ap_vld = 1'b1;
    end else begin
        agg_result_P_a1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        agg_result_P_a2_ap_vld = 1'b1;
    end else begin
        agg_result_P_a2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        agg_result_P_a3_ap_vld = 1'b1;
    end else begin
        agg_result_P_a3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        agg_result_P_b1_ap_vld = 1'b1;
    end else begin
        agg_result_P_b1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        agg_result_P_b2_ap_vld = 1'b1;
    end else begin
        agg_result_P_b2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        agg_result_P_b3_ap_vld = 1'b1;
    end else begin
        agg_result_P_b3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        agg_result_P_c1_ap_vld = 1'b1;
    end else begin
        agg_result_P_c1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        agg_result_P_c2_ap_vld = 1'b1;
    end else begin
        agg_result_P_c2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        agg_result_P_c3_ap_vld = 1'b1;
    end else begin
        agg_result_P_c3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        agg_result_Q_a1_ap_vld = 1'b1;
    end else begin
        agg_result_Q_a1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        agg_result_Q_a2_ap_vld = 1'b1;
    end else begin
        agg_result_Q_a2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        agg_result_Q_a3_ap_vld = 1'b1;
    end else begin
        agg_result_Q_a3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        agg_result_Q_b1_ap_vld = 1'b1;
    end else begin
        agg_result_Q_b1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        agg_result_Q_b2_ap_vld = 1'b1;
    end else begin
        agg_result_Q_b2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        agg_result_Q_b3_ap_vld = 1'b1;
    end else begin
        agg_result_Q_b3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        agg_result_Q_c1_ap_vld = 1'b1;
    end else begin
        agg_result_Q_c1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        agg_result_Q_c2_ap_vld = 1'b1;
    end else begin
        agg_result_Q_c2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        agg_result_Q_c3_ap_vld = 1'b1;
    end else begin
        agg_result_Q_c3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        agg_result_S_ap_vld = 1'b1;
    end else begin
        agg_result_S_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        agg_result_Y_ap_vld = 1'b1;
    end else begin
        agg_result_Y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11)) | ((grp_operator_mul_fu_648_ap_done == 1'b0) & (1'b1 == ap_CS_fsm_state10)))) begin
        grp_fu_691_ce = 1'b0;
    end else begin
        grp_fu_691_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_691_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_691_opcode = 2'd0;
    end else begin
        grp_fu_691_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_691_p0 = tempAdd_a1_reg_1157;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_691_p0 = tmp_25_reg_1241;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_691_p0 = reg_942;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_691_p0 = reg_906;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_691_p0 = reg_894;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_691_p0 = reg_883;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state32))) begin
        grp_fu_691_p0 = reg_872;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_691_p0 = reg_864;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state3))) begin
        grp_fu_691_p0 = reg_843;
    end else begin
        grp_fu_691_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_691_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_691_p1 = value_Q_c3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_691_p1 = value_Q_a3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_691_p1 = value_Q_a1;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_691_p1 = reg_864;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state32))) begin
        grp_fu_691_p1 = reg_843;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_691_p1 = tmp_12_reg_1044;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_691_p1 = reg_855;
    end else begin
        grp_fu_691_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_697_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_697_opcode = 2'd0;
    end else begin
        grp_fu_697_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_697_p0 = tempAdd_a2_reg_1163;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_697_p0 = value_M0_buf_assign_5_reg_1262;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_697_p0 = reg_872;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_697_p0 = reg_965;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_697_p0 = reg_948;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_697_p0 = reg_924;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_697_p0 = reg_900;
    end else begin
        grp_fu_697_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state32))) begin
        grp_fu_697_p1 = reg_855;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_697_p1 = reg_948;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_697_p1 = reg_958;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_697_p1 = value_Q_b3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_697_p1 = value_Q_a2;
    end else begin
        grp_fu_697_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_702_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_702_opcode = 2'd0;
    end else begin
        grp_fu_702_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_702_p0 = tempAdd_a3_reg_1201;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_702_p0 = value_M0_buf_assign_5_reg_1262;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_702_p0 = reg_958;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_702_p0 = reg_930;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_702_p0 = reg_912;
    end else begin
        grp_fu_702_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state32))) begin
        grp_fu_702_p1 = reg_948;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_702_p1 = reg_975;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_702_p1 = value_Q_c1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_702_p1 = value_Q_b1;
    end else begin
        grp_fu_702_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_707_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_707_opcode = 2'd0;
    end else begin
        grp_fu_707_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_707_p0 = tempAdd_b1_reg_1169;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_707_p0 = value_Y;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_707_p0 = reg_936;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_707_p0 = reg_918;
    end else begin
        grp_fu_707_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_707_p1 = reg_958;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_707_p1 = reg_864;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_707_p1 = value_Q_c2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_707_p1 = value_Q_b2;
    end else begin
        grp_fu_707_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_750_p0 = temp2_reg_1252;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_750_p0 = s_out_reg_1123;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_750_p0 = reg_843;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_750_p0 = reg_883;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_750_p0 = value_A_c3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_750_p0 = value_A_a3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_750_p0 = value_A_c1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_750_p0 = value_A_a1;
    end else begin
        grp_fu_750_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_750_p1 = reg_883;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_750_p1 = reg_872;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_750_p1 = reg_843;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_750_p1 = tempAdd_c3_reg_1235;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_750_p1 = s_out_reg_1123;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_750_p1 = tempAdd_a1_reg_1157;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_750_p1 = c_out_reg_1132;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_750_p1 = value_M2;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_750_p1 = value_M0;
    end else begin
        grp_fu_750_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_756_p0 = reg_843;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26))) begin
        grp_fu_756_p0 = reg_965;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_756_p0 = s_out_reg_1123;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_756_p0 = tempAdd_b1_reg_1169;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_756_p0 = value_A_c2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_756_p0 = value_A_a2;
    end else begin
        grp_fu_756_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_756_p1 = reg_965;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_756_p1 = reg_872;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_756_p1 = tmp_32_reg_1246;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_756_p1 = tempAdd_c1_reg_1213;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_756_p1 = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_756_p1 = value_M1;
    end else begin
        grp_fu_756_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state30))) begin
        grp_fu_768_p0 = temp2_reg_1252;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_768_p0 = reg_883;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_768_p0 = s_out_reg_1123;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_768_p0 = reg_843;
    end else begin
        grp_fu_768_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_768_p1 = temp2_reg_1252;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_768_p1 = reg_872;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26))) begin
        grp_fu_768_p1 = tmp_32_reg_1246;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_768_p1 = tempAdd_c2_reg_1219;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_768_p1 = tempAdd_a2_reg_1163;
    end else begin
        grp_fu_768_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_772_p0 = reg_855;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_772_p0 = reg_843;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_772_p0 = tempAdd_b2_reg_1175;
    end else begin
        grp_fu_772_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_772_p1 = reg_883;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_772_p1 = tempAdd_a3_reg_1201;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_772_p1 = 32'd0;
    end else begin
        grp_fu_772_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_777_p0 = reg_855;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_777_p0 = tempAdd_b3_reg_1207;
    end else begin
        grp_fu_777_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_777_p1 = reg_965;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_777_p1 = 32'd0;
    end else begin
        grp_fu_777_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_mat3_a1_read = reg_894;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_mat3_a1_read = value_A_a1;
    end else begin
        grp_operator_mul_fu_648_mat3_a1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_mat3_a2_read = reg_900;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_mat3_a2_read = value_A_a2;
    end else begin
        grp_operator_mul_fu_648_mat3_a2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_mat3_a3_read = reg_906;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_mat3_a3_read = value_A_a3;
    end else begin
        grp_operator_mul_fu_648_mat3_a3_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_mat3_b1_read = reg_912;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_mat3_b1_read = value_A_b1;
    end else begin
        grp_operator_mul_fu_648_mat3_b1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_mat3_b2_read = reg_918;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_mat3_b2_read = value_A_b2;
    end else begin
        grp_operator_mul_fu_648_mat3_b2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_mat3_b3_read = reg_924;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_mat3_b3_read = value_A_b3;
    end else begin
        grp_operator_mul_fu_648_mat3_b3_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_mat3_c1_read = reg_930;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_mat3_c1_read = value_A_c1;
    end else begin
        grp_operator_mul_fu_648_mat3_c1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_mat3_c2_read = reg_936;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_mat3_c2_read = value_A_c2;
    end else begin
        grp_operator_mul_fu_648_mat3_c2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_mat3_c3_read = reg_942;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_mat3_c3_read = value_A_c3;
    end else begin
        grp_operator_mul_fu_648_mat3_c3_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_other_a1_read = value_A_a1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_other_a1_read = value_P_a1;
    end else begin
        grp_operator_mul_fu_648_other_a1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_other_a2_read = value_A_b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_other_a2_read = value_P_a2;
    end else begin
        grp_operator_mul_fu_648_other_a2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_other_a3_read = value_A_c1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_other_a3_read = value_P_a3;
    end else begin
        grp_operator_mul_fu_648_other_a3_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_other_b1_read = value_A_a2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_other_b1_read = value_P_b1;
    end else begin
        grp_operator_mul_fu_648_other_b1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_other_b2_read = value_A_b2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_other_b2_read = value_P_b2;
    end else begin
        grp_operator_mul_fu_648_other_b2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_other_b3_read = value_A_c2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_other_b3_read = value_P_b3;
    end else begin
        grp_operator_mul_fu_648_other_b3_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_other_c1_read = value_A_a3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_other_c1_read = value_P_c1;
    end else begin
        grp_operator_mul_fu_648_other_c1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_other_c2_read = value_A_b3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_other_c2_read = value_P_c2;
    end else begin
        grp_operator_mul_fu_648_other_c2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_operator_mul_fu_648_other_c3_read = value_A_c3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_operator_mul_fu_648_other_c3_read = value_P_c3;
    end else begin
        grp_operator_mul_fu_648_other_c3_read = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_operator_mul_fu_648_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_A_a1 = value_A_a1;

assign agg_result_A_a2 = value_A_a2;

assign agg_result_A_a3 = value_A_a3;

assign agg_result_A_b1 = value_A_b1;

assign agg_result_A_b2 = value_A_b2;

assign agg_result_A_b3 = value_A_b3;

assign agg_result_A_c1 = value_A_c1;

assign agg_result_A_c2 = value_A_c2;

assign agg_result_A_c3 = value_A_c3;

assign agg_result_H0 = reg_843;

assign agg_result_H1 = 32'd0;

assign agg_result_H2 = s_out_reg_1123;

assign agg_result_K0 = reg_883;

assign agg_result_K1 = reg_965;

assign agg_result_K2 = temp2_reg_1252;

assign agg_result_M0 = value_M0_buf_assign_5_reg_1262;

assign agg_result_M1 = grp_fu_697_p2;

assign agg_result_M2 = grp_fu_702_p2;

assign agg_result_MU = reg_864;

assign agg_result_P_a1 = grp_fu_691_p2;

assign agg_result_P_a2 = grp_fu_697_p2;

assign agg_result_P_a3 = grp_fu_702_p2;

assign agg_result_P_b1 = grp_fu_707_p2;

assign agg_result_P_b2 = grp_fu_725_p2;

assign agg_result_P_b3 = grp_fu_730_p2;

assign agg_result_P_c1 = grp_fu_735_p2;

assign agg_result_P_c2 = grp_fu_740_p2;

assign agg_result_P_c3 = grp_fu_745_p2;

assign agg_result_Q_a1 = value_Q_a1;

assign agg_result_Q_a2 = value_Q_a2;

assign agg_result_Q_a3 = value_Q_a3;

assign agg_result_Q_b1 = value_Q_b1;

assign agg_result_Q_b2 = value_Q_b2;

assign agg_result_Q_b3 = value_Q_b3;

assign agg_result_Q_c1 = value_Q_c1;

assign agg_result_Q_c2 = value_Q_c2;

assign agg_result_Q_c3 = value_Q_c3;

assign agg_result_S = reg_872;

assign agg_result_Y = value_Y;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state11_on_subcall_done = ((grp_cordic_sincos_generi_fu_682_ap_done == 1'b0) | (grp_operator_mul_fu_648_ap_done == 1'b0));
end

assign grp_cordic_sincos_generi_fu_682_ap_start = grp_cordic_sincos_generi_fu_682_ap_start_reg;

assign grp_operator_mul_fu_648_ap_start = grp_operator_mul_fu_648_ap_start_reg;

endmodule //filter
