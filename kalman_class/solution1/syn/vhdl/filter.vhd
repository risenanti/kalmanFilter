-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    agg_result_M0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_M0_ap_vld : OUT STD_LOGIC;
    agg_result_M1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_M1_ap_vld : OUT STD_LOGIC;
    agg_result_M2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_M2_ap_vld : OUT STD_LOGIC;
    agg_result_A_a1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_A_a1_ap_vld : OUT STD_LOGIC;
    agg_result_A_a2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_A_a2_ap_vld : OUT STD_LOGIC;
    agg_result_A_a3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_A_a3_ap_vld : OUT STD_LOGIC;
    agg_result_A_b1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_A_b1_ap_vld : OUT STD_LOGIC;
    agg_result_A_b2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_A_b2_ap_vld : OUT STD_LOGIC;
    agg_result_A_b3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_A_b3_ap_vld : OUT STD_LOGIC;
    agg_result_A_c1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_A_c1_ap_vld : OUT STD_LOGIC;
    agg_result_A_c2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_A_c2_ap_vld : OUT STD_LOGIC;
    agg_result_A_c3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_A_c3_ap_vld : OUT STD_LOGIC;
    agg_result_P_a1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_P_a1_ap_vld : OUT STD_LOGIC;
    agg_result_P_a2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_P_a2_ap_vld : OUT STD_LOGIC;
    agg_result_P_a3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_P_a3_ap_vld : OUT STD_LOGIC;
    agg_result_P_b1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_P_b1_ap_vld : OUT STD_LOGIC;
    agg_result_P_b2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_P_b2_ap_vld : OUT STD_LOGIC;
    agg_result_P_b3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_P_b3_ap_vld : OUT STD_LOGIC;
    agg_result_P_c1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_P_c1_ap_vld : OUT STD_LOGIC;
    agg_result_P_c2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_P_c2_ap_vld : OUT STD_LOGIC;
    agg_result_P_c3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_P_c3_ap_vld : OUT STD_LOGIC;
    agg_result_Q_a1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_Q_a1_ap_vld : OUT STD_LOGIC;
    agg_result_Q_a2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_Q_a2_ap_vld : OUT STD_LOGIC;
    agg_result_Q_a3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_Q_a3_ap_vld : OUT STD_LOGIC;
    agg_result_Q_b1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_Q_b1_ap_vld : OUT STD_LOGIC;
    agg_result_Q_b2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_Q_b2_ap_vld : OUT STD_LOGIC;
    agg_result_Q_b3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_Q_b3_ap_vld : OUT STD_LOGIC;
    agg_result_Q_c1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_Q_c1_ap_vld : OUT STD_LOGIC;
    agg_result_Q_c2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_Q_c2_ap_vld : OUT STD_LOGIC;
    agg_result_Q_c3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_Q_c3_ap_vld : OUT STD_LOGIC;
    agg_result_MU : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_MU_ap_vld : OUT STD_LOGIC;
    agg_result_H0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_H0_ap_vld : OUT STD_LOGIC;
    agg_result_H1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_H1_ap_vld : OUT STD_LOGIC;
    agg_result_H2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_H2_ap_vld : OUT STD_LOGIC;
    agg_result_S : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_S_ap_vld : OUT STD_LOGIC;
    agg_result_K0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_K0_ap_vld : OUT STD_LOGIC;
    agg_result_K1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_K1_ap_vld : OUT STD_LOGIC;
    agg_result_K2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_K2_ap_vld : OUT STD_LOGIC;
    agg_result_Y : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_Y_ap_vld : OUT STD_LOGIC;
    value_M0 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_M1 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_M2 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_A_a1 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_A_a2 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_A_a3 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_A_b1 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_A_b2 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_A_b3 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_A_c1 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_A_c2 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_A_c3 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_P_a1 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_P_a2 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_P_a3 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_P_b1 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_P_b2 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_P_b3 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_P_c1 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_P_c2 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_P_c3 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_Q_a1 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_Q_a2 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_Q_a3 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_Q_b1 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_Q_b2 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_Q_b3 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_Q_c1 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_Q_c2 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_Q_c3 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_MU : IN STD_LOGIC_VECTOR (31 downto 0);
    value_H0 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_H1 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_H2 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_S : IN STD_LOGIC_VECTOR (31 downto 0);
    value_K0 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_K1 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_K2 : IN STD_LOGIC_VECTOR (31 downto 0);
    value_Y : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "filter,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku5p-ffvb676-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.857800,HLS_SYN_LAT=103,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=140,HLS_SYN_FF=11795,HLS_SYN_LUT=15101}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (46 downto 0) := "00000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (46 downto 0) := "00000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (46 downto 0) := "00000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (46 downto 0) := "00000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (46 downto 0) := "00000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (46 downto 0) := "00000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (46 downto 0) := "00001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (46 downto 0) := "00010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (46 downto 0) := "00100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (46 downto 0) := "01000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (46 downto 0) := "10000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_756_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_855 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal reg_864 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_operator_mul_fu_648_ap_idle : STD_LOGIC;
    signal grp_operator_mul_fu_648_ap_ready : STD_LOGIC;
    signal grp_operator_mul_fu_648_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_894 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_cordic_sincos_generi_fu_682_ap_idle : STD_LOGIC;
    signal grp_cordic_sincos_generi_fu_682_ap_ready : STD_LOGIC;
    signal grp_cordic_sincos_generi_fu_682_ap_done : STD_LOGIC;
    signal ap_block_state11_on_subcall_done : BOOLEAN;
    signal reg_900 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_906 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_942 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_697_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_965 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_777_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_975 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_12_reg_1044 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal s_out_reg_1123 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_out_reg_1132 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tempAdd_a1_reg_1157 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempAdd_a2_reg_1163 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempAdd_b1_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempAdd_b2_reg_1175 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tempAdd_a3_reg_1201 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tempAdd_b3_reg_1207 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempAdd_c1_reg_1213 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempAdd_c2_reg_1219 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tempAdd_c3_reg_1235 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_25_reg_1241 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_reg_1246 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_reg_1252 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal value_M0_buf_assign_5_reg_1262 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_782_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempMat_b3_reg_1269 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_786_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempMat_c1_reg_1274 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempMat_c2_reg_1279 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_794_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempMat_c3_reg_1284 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_ap_start : STD_LOGIC;
    signal grp_operator_mul_fu_648_mat3_a1_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_mat3_a2_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_mat3_a3_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_mat3_b1_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_mat3_b2_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_mat3_b3_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_mat3_c1_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_mat3_c2_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_mat3_c3_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_other_a1_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_other_a2_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_other_a3_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_other_b1_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_other_b2_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_other_b3_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_other_c1_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_other_c2_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_other_c3_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cordic_sincos_generi_fu_682_ap_start : STD_LOGIC;
    signal grp_cordic_sincos_generi_fu_682_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cordic_sincos_generi_fu_682_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_mul_fu_648_ap_start_reg : STD_LOGIC := '0';
    signal grp_cordic_sincos_generi_fu_682_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_725_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_730_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_740_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_745_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_691_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_691_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_697_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_702_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_702_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_707_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_750_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_756_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_756_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_768_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_768_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_772_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_772_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_777_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_777_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_691_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_691_ce : STD_LOGIC;
    signal grp_fu_697_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_702_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_707_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (46 downto 0);

    component operator_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mat3_a1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        mat3_a2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        mat3_a3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        mat3_b1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        mat3_b2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        mat3_b3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        mat3_c1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        mat3_c2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        mat3_c3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        other_a1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        other_a2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        other_a3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        other_b1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        other_b2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        other_b3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        other_c1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        other_c2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        other_c3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cordic_sincos_generi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filter_faddfsub_3g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filter_fsub_32ns_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filter_fmul_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_operator_mul_fu_648 : component operator_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_operator_mul_fu_648_ap_start,
        ap_done => grp_operator_mul_fu_648_ap_done,
        ap_idle => grp_operator_mul_fu_648_ap_idle,
        ap_ready => grp_operator_mul_fu_648_ap_ready,
        mat3_a1_read => grp_operator_mul_fu_648_mat3_a1_read,
        mat3_a2_read => grp_operator_mul_fu_648_mat3_a2_read,
        mat3_a3_read => grp_operator_mul_fu_648_mat3_a3_read,
        mat3_b1_read => grp_operator_mul_fu_648_mat3_b1_read,
        mat3_b2_read => grp_operator_mul_fu_648_mat3_b2_read,
        mat3_b3_read => grp_operator_mul_fu_648_mat3_b3_read,
        mat3_c1_read => grp_operator_mul_fu_648_mat3_c1_read,
        mat3_c2_read => grp_operator_mul_fu_648_mat3_c2_read,
        mat3_c3_read => grp_operator_mul_fu_648_mat3_c3_read,
        other_a1_read => grp_operator_mul_fu_648_other_a1_read,
        other_a2_read => grp_operator_mul_fu_648_other_a2_read,
        other_a3_read => grp_operator_mul_fu_648_other_a3_read,
        other_b1_read => grp_operator_mul_fu_648_other_b1_read,
        other_b2_read => grp_operator_mul_fu_648_other_b2_read,
        other_b3_read => grp_operator_mul_fu_648_other_b3_read,
        other_c1_read => grp_operator_mul_fu_648_other_c1_read,
        other_c2_read => grp_operator_mul_fu_648_other_c2_read,
        other_c3_read => grp_operator_mul_fu_648_other_c3_read,
        ap_return_0 => grp_operator_mul_fu_648_ap_return_0,
        ap_return_1 => grp_operator_mul_fu_648_ap_return_1,
        ap_return_2 => grp_operator_mul_fu_648_ap_return_2,
        ap_return_3 => grp_operator_mul_fu_648_ap_return_3,
        ap_return_4 => grp_operator_mul_fu_648_ap_return_4,
        ap_return_5 => grp_operator_mul_fu_648_ap_return_5,
        ap_return_6 => grp_operator_mul_fu_648_ap_return_6,
        ap_return_7 => grp_operator_mul_fu_648_ap_return_7,
        ap_return_8 => grp_operator_mul_fu_648_ap_return_8);

    grp_cordic_sincos_generi_fu_682 : component cordic_sincos_generi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cordic_sincos_generi_fu_682_ap_start,
        ap_done => grp_cordic_sincos_generi_fu_682_ap_done,
        ap_idle => grp_cordic_sincos_generi_fu_682_ap_idle,
        ap_ready => grp_cordic_sincos_generi_fu_682_ap_ready,
        t_in => reg_872,
        ap_return_0 => grp_cordic_sincos_generi_fu_682_ap_return_0,
        ap_return_1 => grp_cordic_sincos_generi_fu_682_ap_return_1);

    filter_faddfsub_3g8j_U56 : component filter_faddfsub_3g8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_691_p0,
        din1 => grp_fu_691_p1,
        opcode => grp_fu_691_opcode,
        ce => grp_fu_691_ce,
        dout => grp_fu_691_p2);

    filter_faddfsub_3g8j_U57 : component filter_faddfsub_3g8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_697_p0,
        din1 => grp_fu_697_p1,
        opcode => grp_fu_697_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_697_p2);

    filter_faddfsub_3g8j_U58 : component filter_faddfsub_3g8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_702_p0,
        din1 => grp_fu_702_p1,
        opcode => grp_fu_702_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_702_p2);

    filter_faddfsub_3g8j_U59 : component filter_faddfsub_3g8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_707_p0,
        din1 => grp_fu_707_p1,
        opcode => grp_fu_707_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_707_p2);

    filter_fsub_32ns_hbi_U60 : component filter_fsub_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tempAdd_b2_reg_1175,
        din1 => reg_975,
        ce => ap_const_logic_1,
        dout => grp_fu_725_p2);

    filter_fsub_32ns_hbi_U61 : component filter_fsub_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tempAdd_b3_reg_1207,
        din1 => tempMat_b3_reg_1269,
        ce => ap_const_logic_1,
        dout => grp_fu_730_p2);

    filter_fsub_32ns_hbi_U62 : component filter_fsub_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tempAdd_c1_reg_1213,
        din1 => tempMat_c1_reg_1274,
        ce => ap_const_logic_1,
        dout => grp_fu_735_p2);

    filter_fsub_32ns_hbi_U63 : component filter_fsub_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tempAdd_c2_reg_1219,
        din1 => tempMat_c2_reg_1279,
        ce => ap_const_logic_1,
        dout => grp_fu_740_p2);

    filter_fsub_32ns_hbi_U64 : component filter_fsub_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tempAdd_c3_reg_1235,
        din1 => tempMat_c3_reg_1284,
        ce => ap_const_logic_1,
        dout => grp_fu_745_p2);

    filter_fmul_32ns_cud_U65 : component filter_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_750_p0,
        din1 => grp_fu_750_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_750_p2);

    filter_fmul_32ns_cud_U66 : component filter_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_756_p0,
        din1 => grp_fu_756_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_756_p2);

    filter_fmul_32ns_cud_U67 : component filter_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_768_p0,
        din1 => grp_fu_768_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_768_p2);

    filter_fmul_32ns_cud_U68 : component filter_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_772_p0,
        din1 => grp_fu_772_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_772_p2);

    filter_fmul_32ns_cud_U69 : component filter_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_777_p0,
        din1 => grp_fu_777_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_777_p2);

    filter_fmul_32ns_cud_U70 : component filter_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_855,
        din1 => temp2_reg_1252,
        ce => ap_const_logic_1,
        dout => grp_fu_782_p2);

    filter_fmul_32ns_cud_U71 : component filter_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_948,
        din1 => reg_883,
        ce => ap_const_logic_1,
        dout => grp_fu_786_p2);

    filter_fmul_32ns_cud_U72 : component filter_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_948,
        din1 => reg_965,
        ce => ap_const_logic_1,
        dout => grp_fu_790_p2);

    filter_fmul_32ns_cud_U73 : component filter_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_948,
        din1 => temp2_reg_1252,
        ce => ap_const_logic_1,
        dout => grp_fu_794_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_cordic_sincos_generi_fu_682_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cordic_sincos_generi_fu_682_ap_start_reg <= ap_const_logic_0;
            else
                if (((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    grp_cordic_sincos_generi_fu_682_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cordic_sincos_generi_fu_682_ap_ready = ap_const_logic_1)) then 
                    grp_cordic_sincos_generi_fu_682_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_operator_mul_fu_648_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_operator_mul_fu_648_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
                    grp_operator_mul_fu_648_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_mul_fu_648_ap_ready = ap_const_logic_1)) then 
                    grp_operator_mul_fu_648_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                c_out_reg_1132 <= grp_cordic_sincos_generi_fu_682_ap_return_1;
                s_out_reg_1123 <= grp_cordic_sincos_generi_fu_682_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_843 <= grp_fu_750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_855 <= grp_fu_756_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_864 <= grp_fu_750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then
                reg_872 <= grp_fu_691_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state21))) then
                reg_883 <= grp_fu_691_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then
                reg_894 <= grp_operator_mul_fu_648_ap_return_0;
                reg_900 <= grp_operator_mul_fu_648_ap_return_1;
                reg_906 <= grp_operator_mul_fu_648_ap_return_2;
                reg_912 <= grp_operator_mul_fu_648_ap_return_3;
                reg_918 <= grp_operator_mul_fu_648_ap_return_4;
                reg_924 <= grp_operator_mul_fu_648_ap_return_5;
                reg_930 <= grp_operator_mul_fu_648_ap_return_6;
                reg_936 <= grp_operator_mul_fu_648_ap_return_7;
                reg_942 <= grp_operator_mul_fu_648_ap_return_8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state27))) then
                reg_948 <= grp_fu_768_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state43))) then
                reg_958 <= grp_fu_772_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state21))) then
                reg_965 <= grp_fu_697_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state43))) then
                reg_975 <= grp_fu_777_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                temp2_reg_1252 <= grp_fu_691_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tempAdd_a1_reg_1157 <= grp_fu_691_p2;
                tempAdd_a2_reg_1163 <= grp_fu_697_p2;
                tempAdd_b1_reg_1169 <= grp_fu_702_p2;
                tempAdd_b2_reg_1175 <= grp_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tempAdd_a3_reg_1201 <= grp_fu_691_p2;
                tempAdd_b3_reg_1207 <= grp_fu_697_p2;
                tempAdd_c1_reg_1213 <= grp_fu_702_p2;
                tempAdd_c2_reg_1219 <= grp_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tempAdd_c3_reg_1235 <= grp_fu_691_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                tempMat_b3_reg_1269 <= grp_fu_782_p2;
                tempMat_c1_reg_1274 <= grp_fu_786_p2;
                tempMat_c2_reg_1279 <= grp_fu_790_p2;
                tempMat_c3_reg_1284 <= grp_fu_794_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_12_reg_1044 <= grp_fu_756_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_25_reg_1241 <= grp_fu_702_p2;
                tmp_32_reg_1246 <= grp_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                value_M0_buf_assign_5_reg_1262 <= grp_fu_697_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state10, grp_operator_mul_fu_648_ap_done, ap_CS_fsm_state11, ap_block_state11_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    agg_result_A_a1 <= value_A_a1;

    agg_result_A_a1_ap_vld_assign_proc : process(ap_CS_fsm_state10, grp_operator_mul_fu_648_ap_done)
    begin
        if (((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            agg_result_A_a1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_a1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_a2 <= value_A_a2;

    agg_result_A_a2_ap_vld_assign_proc : process(ap_CS_fsm_state10, grp_operator_mul_fu_648_ap_done)
    begin
        if (((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            agg_result_A_a2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_a2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_a3 <= value_A_a3;

    agg_result_A_a3_ap_vld_assign_proc : process(ap_CS_fsm_state10, grp_operator_mul_fu_648_ap_done)
    begin
        if (((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            agg_result_A_a3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_a3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_b1 <= value_A_b1;

    agg_result_A_b1_ap_vld_assign_proc : process(ap_CS_fsm_state10, grp_operator_mul_fu_648_ap_done)
    begin
        if (((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            agg_result_A_b1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_b1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_b2 <= value_A_b2;

    agg_result_A_b2_ap_vld_assign_proc : process(ap_CS_fsm_state10, grp_operator_mul_fu_648_ap_done)
    begin
        if (((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            agg_result_A_b2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_b2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_b3 <= value_A_b3;

    agg_result_A_b3_ap_vld_assign_proc : process(ap_CS_fsm_state10, grp_operator_mul_fu_648_ap_done)
    begin
        if (((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            agg_result_A_b3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_b3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_c1 <= value_A_c1;

    agg_result_A_c1_ap_vld_assign_proc : process(ap_CS_fsm_state10, grp_operator_mul_fu_648_ap_done)
    begin
        if (((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            agg_result_A_c1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_c1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_c2 <= value_A_c2;

    agg_result_A_c2_ap_vld_assign_proc : process(ap_CS_fsm_state10, grp_operator_mul_fu_648_ap_done)
    begin
        if (((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            agg_result_A_c2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_c2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_c3 <= value_A_c3;

    agg_result_A_c3_ap_vld_assign_proc : process(ap_CS_fsm_state10, grp_operator_mul_fu_648_ap_done)
    begin
        if (((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            agg_result_A_c3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_c3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_H0 <= reg_843;

    agg_result_H0_ap_vld_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            agg_result_H0_ap_vld <= ap_const_logic_1;
        else 
            agg_result_H0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_H1 <= ap_const_lv32_0;

    agg_result_H1_ap_vld_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            agg_result_H1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_H1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_H2 <= s_out_reg_1123;

    agg_result_H2_ap_vld_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            agg_result_H2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_H2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_K0 <= reg_883;

    agg_result_K0_ap_vld_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            agg_result_K0_ap_vld <= ap_const_logic_1;
        else 
            agg_result_K0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_K1 <= reg_965;

    agg_result_K1_ap_vld_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            agg_result_K1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_K1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_K2 <= temp2_reg_1252;

    agg_result_K2_ap_vld_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            agg_result_K2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_K2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_M0 <= value_M0_buf_assign_5_reg_1262;

    agg_result_M0_ap_vld_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            agg_result_M0_ap_vld <= ap_const_logic_1;
        else 
            agg_result_M0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_M1 <= grp_fu_697_p2;

    agg_result_M1_ap_vld_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            agg_result_M1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_M1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_M2 <= grp_fu_702_p2;

    agg_result_M2_ap_vld_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            agg_result_M2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_M2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_MU <= reg_864;

    agg_result_MU_ap_vld_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            agg_result_MU_ap_vld <= ap_const_logic_1;
        else 
            agg_result_MU_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_a1 <= grp_fu_691_p2;

    agg_result_P_a1_ap_vld_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            agg_result_P_a1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_a1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_a2 <= grp_fu_697_p2;

    agg_result_P_a2_ap_vld_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            agg_result_P_a2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_a2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_a3 <= grp_fu_702_p2;

    agg_result_P_a3_ap_vld_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            agg_result_P_a3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_a3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_b1 <= grp_fu_707_p2;

    agg_result_P_b1_ap_vld_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            agg_result_P_b1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_b1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_b2 <= grp_fu_725_p2;

    agg_result_P_b2_ap_vld_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            agg_result_P_b2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_b2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_b3 <= grp_fu_730_p2;

    agg_result_P_b3_ap_vld_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            agg_result_P_b3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_b3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_c1 <= grp_fu_735_p2;

    agg_result_P_c1_ap_vld_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            agg_result_P_c1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_c1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_c2 <= grp_fu_740_p2;

    agg_result_P_c2_ap_vld_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            agg_result_P_c2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_c2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_c3 <= grp_fu_745_p2;

    agg_result_P_c3_ap_vld_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            agg_result_P_c3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_c3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_a1 <= value_Q_a1;

    agg_result_Q_a1_ap_vld_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            agg_result_Q_a1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_a1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_a2 <= value_Q_a2;

    agg_result_Q_a2_ap_vld_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            agg_result_Q_a2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_a2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_a3 <= value_Q_a3;

    agg_result_Q_a3_ap_vld_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            agg_result_Q_a3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_a3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_b1 <= value_Q_b1;

    agg_result_Q_b1_ap_vld_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            agg_result_Q_b1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_b1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_b2 <= value_Q_b2;

    agg_result_Q_b2_ap_vld_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            agg_result_Q_b2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_b2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_b3 <= value_Q_b3;

    agg_result_Q_b3_ap_vld_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            agg_result_Q_b3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_b3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_c1 <= value_Q_c1;

    agg_result_Q_c1_ap_vld_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            agg_result_Q_c1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_c1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_c2 <= value_Q_c2;

    agg_result_Q_c2_ap_vld_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            agg_result_Q_c2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_c2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_c3 <= value_Q_c3;

    agg_result_Q_c3_ap_vld_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            agg_result_Q_c3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_c3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_S <= reg_872;

    agg_result_S_ap_vld_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            agg_result_S_ap_vld <= ap_const_logic_1;
        else 
            agg_result_S_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Y <= value_Y;

    agg_result_Y_ap_vld_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            agg_result_Y_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state11_on_subcall_done_assign_proc : process(grp_operator_mul_fu_648_ap_done, grp_cordic_sincos_generi_fu_682_ap_done)
    begin
                ap_block_state11_on_subcall_done <= ((grp_cordic_sincos_generi_fu_682_ap_done = ap_const_logic_0) or (grp_operator_mul_fu_648_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_cordic_sincos_generi_fu_682_ap_start <= grp_cordic_sincos_generi_fu_682_ap_start_reg;

    grp_fu_691_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state10, grp_operator_mul_fu_648_ap_done, ap_CS_fsm_state11, ap_block_state11_on_subcall_done, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_1 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_operator_mul_fu_648_ap_done = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            grp_fu_691_ce <= ap_const_logic_0;
        else 
            grp_fu_691_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_691_opcode_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state18, ap_CS_fsm_state28, ap_CS_fsm_state36, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_691_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_691_opcode <= ap_const_lv2_0;
        else 
            grp_fu_691_opcode <= "XX";
        end if; 
    end process;


    grp_fu_691_p0_assign_proc : process(reg_843, ap_CS_fsm_state6, reg_864, reg_872, ap_CS_fsm_state10, reg_883, reg_894, reg_906, reg_942, ap_CS_fsm_state12, tempAdd_a1_reg_1157, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state22, tmp_25_reg_1241, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state18, ap_CS_fsm_state28, ap_CS_fsm_state36, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_691_p0 <= tempAdd_a1_reg_1157;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_691_p0 <= tmp_25_reg_1241;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_691_p0 <= reg_942;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_691_p0 <= reg_906;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_691_p0 <= reg_894;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_691_p0 <= reg_883;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_691_p0 <= reg_872;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_691_p0 <= reg_864;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_691_p0 <= reg_843;
        else 
            grp_fu_691_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_691_p1_assign_proc : process(value_Q_a1, value_Q_a3, value_Q_c3, reg_843, ap_CS_fsm_state6, reg_855, reg_864, ap_CS_fsm_state10, tmp_12_reg_1044, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state18, ap_CS_fsm_state28, ap_CS_fsm_state36, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_691_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_691_p1 <= value_Q_c3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_691_p1 <= value_Q_a3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_691_p1 <= value_Q_a1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_691_p1 <= reg_864;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_691_p1 <= reg_843;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_691_p1 <= tmp_12_reg_1044;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_691_p1 <= reg_855;
        else 
            grp_fu_691_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_697_opcode_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state32, ap_CS_fsm_state18, ap_CS_fsm_state28, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_697_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_697_opcode <= ap_const_lv2_0;
        else 
            grp_fu_697_opcode <= "XX";
        end if; 
    end process;


    grp_fu_697_p0_assign_proc : process(reg_872, reg_900, reg_924, reg_948, reg_965, ap_CS_fsm_state12, tempAdd_a2_reg_1163, ap_CS_fsm_state16, ap_CS_fsm_state22, value_M0_buf_assign_5_reg_1262, ap_CS_fsm_state32, ap_CS_fsm_state18, ap_CS_fsm_state28, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_697_p0 <= tempAdd_a2_reg_1163;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_697_p0 <= value_M0_buf_assign_5_reg_1262;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_697_p0 <= reg_872;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_697_p0 <= reg_965;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_697_p0 <= reg_948;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_697_p0 <= reg_924;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_697_p0 <= reg_900;
        else 
            grp_fu_697_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_697_p1_assign_proc : process(value_Q_a2, value_Q_b3, reg_855, reg_948, reg_958, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state32, ap_CS_fsm_state18, ap_CS_fsm_state28, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_697_p1 <= reg_855;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_697_p1 <= reg_948;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_697_p1 <= reg_958;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_697_p1 <= value_Q_b3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_697_p1 <= value_Q_a2;
        else 
            grp_fu_697_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_702_opcode_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state32, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_702_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_702_opcode <= ap_const_lv2_0;
        else 
            grp_fu_702_opcode <= "XX";
        end if; 
    end process;


    grp_fu_702_p0_assign_proc : process(reg_912, reg_930, reg_958, ap_CS_fsm_state12, ap_CS_fsm_state16, tempAdd_a3_reg_1201, ap_CS_fsm_state22, value_M0_buf_assign_5_reg_1262, ap_CS_fsm_state32, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_702_p0 <= tempAdd_a3_reg_1201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_702_p0 <= value_M0_buf_assign_5_reg_1262;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_702_p0 <= reg_958;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_702_p0 <= reg_930;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_702_p0 <= reg_912;
        else 
            grp_fu_702_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_702_p1_assign_proc : process(value_Q_b1, value_Q_c1, reg_948, reg_975, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state32, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_702_p1 <= reg_948;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_702_p1 <= reg_975;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_702_p1 <= value_Q_c1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_702_p1 <= value_Q_b1;
        else 
            grp_fu_702_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_707_opcode_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_707_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_707_opcode <= ap_const_lv2_0;
        else 
            grp_fu_707_opcode <= "XX";
        end if; 
    end process;


    grp_fu_707_p0_assign_proc : process(value_Y, reg_918, reg_936, ap_CS_fsm_state12, tempAdd_b1_reg_1169, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_707_p0 <= tempAdd_b1_reg_1169;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_707_p0 <= value_Y;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_707_p0 <= reg_936;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_707_p0 <= reg_918;
        else 
            grp_fu_707_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_707_p1_assign_proc : process(value_Q_b2, value_Q_c2, reg_864, reg_958, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_707_p1 <= reg_958;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_707_p1 <= reg_864;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_707_p1 <= value_Q_c2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_707_p1 <= value_Q_b2;
        else 
            grp_fu_707_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_750_p0_assign_proc : process(ap_CS_fsm_state1, value_A_a1, value_A_a3, value_A_c1, value_A_c3, reg_843, ap_CS_fsm_state5, reg_883, ap_CS_fsm_state4, ap_CS_fsm_state8, s_out_reg_1123, ap_CS_fsm_state16, ap_CS_fsm_state20, temp2_reg_1252, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state14, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_750_p0 <= temp2_reg_1252;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_750_p0 <= s_out_reg_1123;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_750_p0 <= reg_843;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_750_p0 <= reg_883;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_750_p0 <= value_A_c3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_750_p0 <= value_A_a3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_750_p0 <= value_A_c1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_750_p0 <= value_A_a1;
        else 
            grp_fu_750_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_750_p1_assign_proc : process(ap_CS_fsm_state1, value_M0, value_M2, reg_843, ap_CS_fsm_state5, reg_872, reg_883, ap_CS_fsm_state4, ap_CS_fsm_state8, s_out_reg_1123, c_out_reg_1132, tempAdd_a1_reg_1157, ap_CS_fsm_state16, ap_CS_fsm_state20, tempAdd_c3_reg_1235, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state14, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_750_p1 <= reg_883;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_750_p1 <= reg_872;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_750_p1 <= reg_843;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_750_p1 <= tempAdd_c3_reg_1235;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_750_p1 <= s_out_reg_1123;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_750_p1 <= tempAdd_a1_reg_1157;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_750_p1 <= c_out_reg_1132;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_750_p1 <= value_M2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_750_p1 <= value_M0;
        else 
            grp_fu_750_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_756_p0_assign_proc : process(ap_CS_fsm_state1, value_A_a2, value_A_c2, reg_843, reg_965, ap_CS_fsm_state4, s_out_reg_1123, tempAdd_b1_reg_1169, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_756_p0 <= reg_843;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_fu_756_p0 <= reg_965;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_756_p0 <= s_out_reg_1123;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_756_p0 <= tempAdd_b1_reg_1169;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_756_p0 <= value_A_c2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_756_p0 <= value_A_a2;
        else 
            grp_fu_756_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_756_p1_assign_proc : process(ap_CS_fsm_state1, value_M1, reg_872, reg_965, ap_CS_fsm_state4, ap_CS_fsm_state16, tempAdd_c1_reg_1213, ap_CS_fsm_state20, tmp_32_reg_1246, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_756_p1 <= reg_965;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_756_p1 <= reg_872;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_756_p1 <= tmp_32_reg_1246;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_756_p1 <= tempAdd_c1_reg_1213;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_756_p1 <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_756_p1 <= value_M1;
        else 
            grp_fu_756_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_768_p0_assign_proc : process(reg_843, reg_883, s_out_reg_1123, ap_CS_fsm_state16, ap_CS_fsm_state20, temp2_reg_1252, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_768_p0 <= temp2_reg_1252;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_768_p0 <= reg_883;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_768_p0 <= s_out_reg_1123;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_768_p0 <= reg_843;
        else 
            grp_fu_768_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_768_p1_assign_proc : process(reg_872, tempAdd_a2_reg_1163, ap_CS_fsm_state16, tempAdd_c2_reg_1219, ap_CS_fsm_state20, tmp_32_reg_1246, temp2_reg_1252, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_768_p1 <= temp2_reg_1252;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_768_p1 <= reg_872;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_fu_768_p1 <= tmp_32_reg_1246;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_768_p1 <= tempAdd_c2_reg_1219;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_768_p1 <= tempAdd_a2_reg_1163;
        else 
            grp_fu_768_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_772_p0_assign_proc : process(reg_843, reg_855, tempAdd_b2_reg_1175, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_772_p0 <= reg_855;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_772_p0 <= reg_843;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_772_p0 <= tempAdd_b2_reg_1175;
        else 
            grp_fu_772_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_772_p1_assign_proc : process(reg_883, ap_CS_fsm_state16, tempAdd_a3_reg_1201, ap_CS_fsm_state20, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_772_p1 <= reg_883;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_772_p1 <= tempAdd_a3_reg_1201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_772_p1 <= ap_const_lv32_0;
        else 
            grp_fu_772_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_777_p0_assign_proc : process(reg_855, tempAdd_b3_reg_1207, ap_CS_fsm_state20, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_777_p0 <= reg_855;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_777_p0 <= tempAdd_b3_reg_1207;
        else 
            grp_fu_777_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_777_p1_assign_proc : process(reg_965, ap_CS_fsm_state20, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_777_p1 <= reg_965;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_777_p1 <= ap_const_lv32_0;
        else 
            grp_fu_777_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_operator_mul_fu_648_ap_start <= grp_operator_mul_fu_648_ap_start_reg;

    grp_operator_mul_fu_648_mat3_a1_read_assign_proc : process(value_A_a1, ap_CS_fsm_state10, reg_894, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_mat3_a1_read <= reg_894;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_mat3_a1_read <= value_A_a1;
        else 
            grp_operator_mul_fu_648_mat3_a1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_a2_read_assign_proc : process(value_A_a2, ap_CS_fsm_state10, ap_CS_fsm_state11, reg_900)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_mat3_a2_read <= reg_900;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_mat3_a2_read <= value_A_a2;
        else 
            grp_operator_mul_fu_648_mat3_a2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_a3_read_assign_proc : process(value_A_a3, ap_CS_fsm_state10, ap_CS_fsm_state11, reg_906)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_mat3_a3_read <= reg_906;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_mat3_a3_read <= value_A_a3;
        else 
            grp_operator_mul_fu_648_mat3_a3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_b1_read_assign_proc : process(value_A_b1, ap_CS_fsm_state10, ap_CS_fsm_state11, reg_912)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_mat3_b1_read <= reg_912;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_mat3_b1_read <= value_A_b1;
        else 
            grp_operator_mul_fu_648_mat3_b1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_b2_read_assign_proc : process(value_A_b2, ap_CS_fsm_state10, ap_CS_fsm_state11, reg_918)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_mat3_b2_read <= reg_918;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_mat3_b2_read <= value_A_b2;
        else 
            grp_operator_mul_fu_648_mat3_b2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_b3_read_assign_proc : process(value_A_b3, ap_CS_fsm_state10, ap_CS_fsm_state11, reg_924)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_mat3_b3_read <= reg_924;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_mat3_b3_read <= value_A_b3;
        else 
            grp_operator_mul_fu_648_mat3_b3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_c1_read_assign_proc : process(value_A_c1, ap_CS_fsm_state10, ap_CS_fsm_state11, reg_930)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_mat3_c1_read <= reg_930;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_mat3_c1_read <= value_A_c1;
        else 
            grp_operator_mul_fu_648_mat3_c1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_c2_read_assign_proc : process(value_A_c2, ap_CS_fsm_state10, ap_CS_fsm_state11, reg_936)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_mat3_c2_read <= reg_936;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_mat3_c2_read <= value_A_c2;
        else 
            grp_operator_mul_fu_648_mat3_c2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_c3_read_assign_proc : process(value_A_c3, ap_CS_fsm_state10, ap_CS_fsm_state11, reg_942)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_mat3_c3_read <= reg_942;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_mat3_c3_read <= value_A_c3;
        else 
            grp_operator_mul_fu_648_mat3_c3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_a1_read_assign_proc : process(value_A_a1, value_P_a1, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_other_a1_read <= value_A_a1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_other_a1_read <= value_P_a1;
        else 
            grp_operator_mul_fu_648_other_a1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_a2_read_assign_proc : process(value_A_b1, value_P_a2, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_other_a2_read <= value_A_b1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_other_a2_read <= value_P_a2;
        else 
            grp_operator_mul_fu_648_other_a2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_a3_read_assign_proc : process(value_A_c1, value_P_a3, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_other_a3_read <= value_A_c1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_other_a3_read <= value_P_a3;
        else 
            grp_operator_mul_fu_648_other_a3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_b1_read_assign_proc : process(value_A_a2, value_P_b1, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_other_b1_read <= value_A_a2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_other_b1_read <= value_P_b1;
        else 
            grp_operator_mul_fu_648_other_b1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_b2_read_assign_proc : process(value_A_b2, value_P_b2, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_other_b2_read <= value_A_b2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_other_b2_read <= value_P_b2;
        else 
            grp_operator_mul_fu_648_other_b2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_b3_read_assign_proc : process(value_A_c2, value_P_b3, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_other_b3_read <= value_A_c2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_other_b3_read <= value_P_b3;
        else 
            grp_operator_mul_fu_648_other_b3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_c1_read_assign_proc : process(value_A_a3, value_P_c1, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_other_c1_read <= value_A_a3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_other_c1_read <= value_P_c1;
        else 
            grp_operator_mul_fu_648_other_c1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_c2_read_assign_proc : process(value_A_b3, value_P_c2, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_other_c2_read <= value_A_b3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_other_c2_read <= value_P_c2;
        else 
            grp_operator_mul_fu_648_other_c2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_c3_read_assign_proc : process(value_A_c3, value_P_c3, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_operator_mul_fu_648_other_c3_read <= value_A_c3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_operator_mul_fu_648_other_c3_read <= value_P_c3;
        else 
            grp_operator_mul_fu_648_other_c3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

end behav;
