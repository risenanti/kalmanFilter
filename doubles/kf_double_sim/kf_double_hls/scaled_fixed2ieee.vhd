-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scaled_fixed2ieee is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (86 downto 0);
    prescale : IN STD_LOGIC_VECTOR (6 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of scaled_fixed2ieee is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv87_0 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_56 : STD_LOGIC_VECTOR (6 downto 0) := "1010110";
    constant ap_const_lv7_47 : STD_LOGIC_VECTOR (6 downto 0) := "1000111";
    constant ap_const_lv87_7FFFFFFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (86 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv11_401 : STD_LOGIC_VECTOR (10 downto 0) := "10000000001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Result_8_fu_226_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_reg_626 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_shift_V_2_fu_240_p3 : STD_LOGIC_VECTOR (86 downto 0);
    signal in_shift_V_2_reg_631 : STD_LOGIC_VECTOR (86 downto 0);
    signal i_1_fu_254_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_642 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_bits_V_addr_1_reg_647 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_bits_V_addr_reg_652 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_fu_428_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_660 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_3_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_665 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_3_fu_464_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_679 : STD_LOGIC_VECTOR (2 downto 0);
    signal shift_2_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal in_shift_V_fu_520_p3 : STD_LOGIC_VECTOR (86 downto 0);
    signal out_bits_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_bits_V_ce0 : STD_LOGIC;
    signal out_bits_V_we0 : STD_LOGIC;
    signal out_bits_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal c_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_150 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_reg_162 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal in_shift_reg_173 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_10_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_reg_195 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_p_Val2_s_phi_fu_209_p4 : STD_LOGIC_VECTOR (86 downto 0);
    signal p_Val2_s_reg_206 : STD_LOGIC_VECTOR (86 downto 0);
    signal ap_phi_mux_shift_1_phi_fu_219_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_1_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_2_fu_385_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_409_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_fu_234_p2 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_2_fu_265_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal Lo_assign_fu_279_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal Hi_assign_fu_273_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_300_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_312_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_fu_291_p4 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_18_fu_306_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_318_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_fu_333_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_341_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_fu_326_p3 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_24_fu_347_p1 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_25_fu_351_p1 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_26_fu_355_p2 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_27_fu_361_p2 : STD_LOGIC_VECTOR (86 downto 0);
    signal p_Result_12_fu_367_p2 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_29_fu_373_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_377_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_fu_398_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_401_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_13_fu_439_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal isNeg_fu_482_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_490_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_fu_496_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_504_p1 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_8_fu_514_p2 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_7_fu_508_p2 : STD_LOGIC_VECTOR (86 downto 0);
    signal prescale_cast_fu_535_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_538_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_cast_fu_544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_548_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_554_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp6_fu_577_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_32_fu_573_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_exp_V_fu_595_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_6_fu_587_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_14_fu_603_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_write_assign_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component scaled_fixed2ieeedEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    out_bits_V_U : component scaled_fixed2ieeedEe
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_bits_V_address0,
        ce0 => out_bits_V_ce0,
        we0 => out_bits_V_we0,
        d0 => out_bits_V_d0,
        q0 => out_bits_V_q0);

    c_U : component scaled_fixed2ieeedEe
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        we0 => c_we0,
        d0 => c_d0,
        q0 => c_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((tmp_5_reg_675 = ap_const_lv1_0) or (tmp_10_fu_529_p2 = ap_const_lv1_0)))) then 
                    ap_return_preg <= result_write_assign_fu_612_p1;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i1_reg_162 <= i_2_reg_660;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i1_reg_162 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i2_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i2_reg_195 <= ap_const_lv3_0;
            elsif (((tmp_5_reg_675 = ap_const_lv1_1) and (tmp_10_fu_529_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i2_reg_195 <= i_3_reg_679;
            end if; 
        end if;
    end process;

    i_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_150 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_150 <= i_1_reg_642;
            end if; 
        end if;
    end process;

    in_shift_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                in_shift_reg_173 <= in_shift_V_2_reg_631;
            elsif (((tmp_5_reg_675 = ap_const_lv1_1) and (tmp_10_fu_529_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                in_shift_reg_173 <= in_shift_V_fu_520_p3;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_reg_675 = ap_const_lv1_1) and (tmp_10_fu_529_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                p_Val2_s_reg_206 <= in_shift_V_fu_520_p3;
            elsif (((tmp_5_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_Val2_s_reg_206 <= in_shift_reg_173;
            end if; 
        end if;
    end process;

    shift_1_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_reg_675 = ap_const_lv1_1) and (tmp_10_fu_529_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                shift_1_reg_216 <= shift_2_fu_475_p2;
            elsif (((tmp_5_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                shift_1_reg_216 <= shift_reg_183;
            end if; 
        end if;
    end process;

    shift_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                shift_reg_183 <= ap_const_lv32_0;
            elsif (((tmp_5_reg_675 = ap_const_lv1_1) and (tmp_10_fu_529_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                shift_reg_183 <= shift_2_fu_475_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_642 <= i_1_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_2_reg_660 <= i_2_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_3_reg_679 <= i_3_fu_464_p2;
                tmp_5_reg_675 <= tmp_5_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                in_shift_V_2_reg_631 <= in_shift_V_2_fu_240_p3;
                p_Result_8_reg_626 <= in_V(86 downto 86);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                out_bits_V_addr_1_reg_647 <= tmp_1_fu_260_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_422_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_3_reg_665(2 downto 0) <= tmp_3_fu_434_p1(2 downto 0);
            end if;
        end if;
    end process;
    tmp_3_reg_665(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_248_p2, ap_CS_fsm_state5, exitcond_fu_422_p2, tmp_5_reg_675, ap_CS_fsm_state8, tmp_10_fu_529_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((exitcond_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((tmp_5_reg_675 = ap_const_lv1_0) or (tmp_10_fu_529_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    Hi_assign_fu_273_p2 <= std_logic_vector(signed(ap_const_lv7_56) - signed(tmp_2_fu_265_p3));
    Lo_assign_fu_279_p2 <= std_logic_vector(signed(ap_const_lv7_47) - signed(tmp_2_fu_265_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_5_reg_675, ap_CS_fsm_state8, tmp_10_fu_529_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and ((tmp_5_reg_675 = ap_const_lv1_0) or (tmp_10_fu_529_p2 = ap_const_lv1_0))) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Val2_s_phi_fu_209_p4_assign_proc : process(tmp_5_reg_675, ap_CS_fsm_state8, in_shift_V_fu_520_p3, tmp_10_fu_529_p2, p_Val2_s_reg_206)
    begin
        if (((tmp_5_reg_675 = ap_const_lv1_1) and (tmp_10_fu_529_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_phi_mux_p_Val2_s_phi_fu_209_p4 <= in_shift_V_fu_520_p3;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_209_p4 <= p_Val2_s_reg_206;
        end if; 
    end process;


    ap_phi_mux_shift_1_phi_fu_219_p4_assign_proc : process(tmp_5_reg_675, shift_2_fu_475_p2, ap_CS_fsm_state8, tmp_10_fu_529_p2, shift_1_reg_216)
    begin
        if (((tmp_5_reg_675 = ap_const_lv1_1) and (tmp_10_fu_529_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_phi_mux_shift_1_phi_fu_219_p4 <= shift_2_fu_475_p2;
        else 
            ap_phi_mux_shift_1_phi_fu_219_p4 <= shift_1_reg_216;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_5_reg_675, ap_CS_fsm_state8, tmp_10_fu_529_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((tmp_5_reg_675 = ap_const_lv1_0) or (tmp_10_fu_529_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(tmp_5_reg_675, ap_CS_fsm_state8, tmp_10_fu_529_p2, result_write_assign_fu_612_p1, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((tmp_5_reg_675 = ap_const_lv1_0) or (tmp_10_fu_529_p2 = ap_const_lv1_0)))) then 
            ap_return <= result_write_assign_fu_612_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    c_address0_assign_proc : process(tmp_3_reg_665, ap_CS_fsm_state7, ap_CS_fsm_state6, tmp_6_fu_470_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_address0 <= tmp_6_fu_470_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_address0 <= tmp_3_reg_665(3 - 1 downto 0);
        else 
            c_address0 <= "XXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    c_d0_proc : process(p_Result_13_fu_439_p4)
    begin
        c_d0 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_13_fu_439_p4(i) = '1' then
                c_d0 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;


    c_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_248_p2 <= "1" when (i_reg_150 = ap_const_lv3_5) else "0";
    exitcond_fu_422_p2 <= "1" when (i1_reg_162 = ap_const_lv3_6) else "0";
    i_1_fu_254_p2 <= std_logic_vector(unsigned(i_reg_150) + unsigned(ap_const_lv3_1));
    i_2_fu_428_p2 <= std_logic_vector(unsigned(i1_reg_162) + unsigned(ap_const_lv3_1));
    i_3_fu_464_p2 <= std_logic_vector(unsigned(i2_reg_195) + unsigned(ap_const_lv3_1));
    in_shift_V_2_fu_240_p3 <= 
        p_Val2_2_fu_234_p2 when (p_Result_8_fu_226_p3(0) = '1') else 
        in_V;
    in_shift_V_fu_520_p3 <= 
        tmp_8_fu_514_p2 when (isNeg_fu_482_p3(0) = '1') else 
        tmp_7_fu_508_p2;
    isNeg_fu_482_p3 <= c_q0(31 downto 31);
    newexp_fu_548_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_544_p1) - unsigned(ap_phi_mux_shift_1_phi_fu_219_p4));
    or_cond_fu_567_p2 <= (tmp_31_fu_554_p3 or tmp_12_fu_562_p2);
    out_bits_V_addr_reg_652 <= ap_const_lv64_5(3 - 1 downto 0);

    out_bits_V_address0_assign_proc : process(ap_CS_fsm_state2, out_bits_V_addr_1_reg_647, exitcond1_fu_248_p2, out_bits_V_addr_reg_652, ap_CS_fsm_state5, tmp_3_fu_434_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_1_fu_260_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_bits_V_address0 <= tmp_3_fu_434_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_bits_V_address0 <= out_bits_V_addr_reg_652;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_bits_V_address0 <= out_bits_V_addr_1_reg_647;
        elsif (((exitcond1_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_bits_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif (((exitcond1_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_bits_V_address0 <= tmp_1_fu_260_p1(3 - 1 downto 0);
        else 
            out_bits_V_address0 <= "XXX";
        end if; 
    end process;


    out_bits_V_ce0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_248_p2, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((exitcond1_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((exitcond1_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_bits_V_ce0 <= ap_const_logic_1;
        else 
            out_bits_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_bits_V_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, p_Result_2_fu_385_p5, p_Result_s_fu_409_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_bits_V_d0 <= p_Result_s_fu_409_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_bits_V_d0 <= p_Result_2_fu_385_p5;
        else 
            out_bits_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_bits_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_bits_V_we0 <= ap_const_logic_1;
        else 
            out_bits_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_exp_V_fu_595_p3 <= 
        ap_const_lv11_0 when (or_cond_fu_567_p2(0) = '1') else 
        tmp_32_fu_573_p1;
    p_Result_12_fu_367_p2 <= (tmp_27_fu_361_p2 and tmp_26_fu_355_p2);
    
    p_Result_13_fu_439_p4_proc : process(out_bits_V_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_13_fu_439_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := out_bits_V_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_13_fu_439_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_13_fu_439_p4_i) := out_bits_V_q0(32-1-p_Result_13_fu_439_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_13_fu_439_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_14_fu_603_p4 <= ((p_Result_8_reg_626 & out_exp_V_fu_595_p3) & p_Val2_6_fu_587_p3);
    p_Result_2_fu_385_p5 <= (tmp_9_fu_377_p3 & out_bits_V_q0(14 downto 0));
    p_Result_8_fu_226_p3 <= in_V(86 downto 86);
    p_Result_s_fu_409_p5 <= (tmp_fu_401_p3 & out_bits_V_q0(23 downto 0));
    p_Val2_2_fu_234_p2 <= std_logic_vector(unsigned(ap_const_lv87_0) - unsigned(in_V));
    p_Val2_6_fu_587_p3 <= 
        ap_const_lv52_0 when (or_cond_fu_567_p2(0) = '1') else 
        phitmp6_fu_577_p4;
    phitmp6_fu_577_p4 <= ap_phi_mux_p_Val2_s_phi_fu_209_p4(85 downto 34);
    prescale_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(prescale),11));
    result_write_assign_fu_612_p1 <= p_Result_14_fu_603_p4;
    sh_assign_1_fu_496_p3 <= 
        tmp_s_fu_490_p2 when (isNeg_fu_482_p3(0) = '1') else 
        c_q0;
    shift_2_fu_475_p2 <= std_logic_vector(unsigned(c_q0) + unsigned(shift_reg_183));
    tmp_10_fu_529_p2 <= "1" when (c_q0 = ap_const_lv32_10) else "0";
    tmp_11_cast_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_538_p2),32));
    tmp_11_fu_538_p2 <= std_logic_vector(signed(ap_const_lv11_401) - signed(prescale_cast_fu_535_p1));
    tmp_12_fu_562_p2 <= "1" when (in_V = ap_const_lv87_0) else "0";
    tmp_14_fu_398_p1 <= in_shift_V_2_reg_631(7 - 1 downto 0);
    tmp_15_fu_285_p2 <= "1" when (unsigned(Lo_assign_fu_279_p2) > unsigned(Hi_assign_fu_273_p2)) else "0";
    
    tmp_16_fu_291_p4_proc : process(in_shift_V_2_reg_631)
    variable vlo_cpy : STD_LOGIC_VECTOR(87+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(87+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(87 - 1 downto 0);
    variable tmp_16_fu_291_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(87 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(87 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(87 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_56(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := in_shift_V_2_reg_631;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(87-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(87-1-unsigned(ap_const_lv32_56(7-1 downto 0)));
            for tmp_16_fu_291_p4_i in 0 to 87-1 loop
                v0_cpy(tmp_16_fu_291_p4_i) := in_shift_V_2_reg_631(87-1-tmp_16_fu_291_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(87-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_16_fu_291_p4 <= resvalue(87-1 downto 0);
    end process;

    tmp_17_fu_300_p2 <= std_logic_vector(unsigned(Lo_assign_fu_279_p2) - unsigned(Hi_assign_fu_273_p2));
    tmp_18_fu_306_p2 <= std_logic_vector(signed(ap_const_lv7_56) - signed(Lo_assign_fu_279_p2));
    tmp_19_fu_312_p2 <= std_logic_vector(unsigned(Hi_assign_fu_273_p2) - unsigned(Lo_assign_fu_279_p2));
    tmp_1_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_150),64));
    tmp_20_fu_318_p3 <= 
        tmp_17_fu_300_p2 when (tmp_15_fu_285_p2(0) = '1') else 
        tmp_19_fu_312_p2;
    tmp_21_fu_326_p3 <= 
        tmp_16_fu_291_p4 when (tmp_15_fu_285_p2(0) = '1') else 
        in_shift_V_2_reg_631;
    tmp_22_fu_333_p3 <= 
        tmp_18_fu_306_p2 when (tmp_15_fu_285_p2(0) = '1') else 
        Lo_assign_fu_279_p2;
    tmp_23_fu_341_p2 <= std_logic_vector(signed(ap_const_lv7_56) - signed(tmp_20_fu_318_p3));
    tmp_24_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_333_p3),87));
    tmp_25_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_341_p2),87));
    tmp_26_fu_355_p2 <= std_logic_vector(shift_right(unsigned(tmp_21_fu_326_p3),to_integer(unsigned('0' & tmp_24_fu_347_p1(31-1 downto 0)))));
    tmp_27_fu_361_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv87_7FFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_25_fu_351_p1(31-1 downto 0)))));
    tmp_29_fu_373_p1 <= p_Result_12_fu_367_p2(16 - 1 downto 0);
    tmp_2_fu_265_p3 <= (i_reg_150 & ap_const_lv4_0);
    tmp_31_fu_554_p3 <= newexp_fu_548_p2(31 downto 31);
    tmp_32_fu_573_p1 <= newexp_fu_548_p2(11 - 1 downto 0);
    tmp_3_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_162),64));
    tmp_4_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_fu_496_p3),87));
    tmp_5_fu_458_p2 <= "1" when (unsigned(i2_reg_195) < unsigned(ap_const_lv3_6)) else "0";
    tmp_6_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_195),64));
    tmp_7_fu_508_p2 <= std_logic_vector(shift_left(unsigned(in_shift_reg_173),to_integer(unsigned('0' & tmp_4_fu_504_p1(31-1 downto 0)))));
    tmp_8_fu_514_p2 <= std_logic_vector(shift_right(unsigned(in_shift_reg_173),to_integer(unsigned('0' & tmp_4_fu_504_p1(31-1 downto 0)))));
    tmp_9_fu_377_p3 <= (tmp_29_fu_373_p1 & ap_const_lv1_1);
    tmp_fu_401_p3 <= (tmp_14_fu_398_p1 & ap_const_lv1_1);
    tmp_s_fu_490_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(c_q0));
end behav;
