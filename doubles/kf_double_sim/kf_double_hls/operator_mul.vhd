-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mat3_a1_read : IN STD_LOGIC_VECTOR (63 downto 0);
    mat3_a2_read : IN STD_LOGIC_VECTOR (63 downto 0);
    mat3_a3_read : IN STD_LOGIC_VECTOR (63 downto 0);
    mat3_b1_read : IN STD_LOGIC_VECTOR (63 downto 0);
    mat3_b2_read : IN STD_LOGIC_VECTOR (63 downto 0);
    mat3_b3_read : IN STD_LOGIC_VECTOR (63 downto 0);
    mat3_c1_read : IN STD_LOGIC_VECTOR (63 downto 0);
    mat3_c2_read : IN STD_LOGIC_VECTOR (63 downto 0);
    mat3_c3_read : IN STD_LOGIC_VECTOR (63 downto 0);
    other_a1_read : IN STD_LOGIC_VECTOR (63 downto 0);
    other_a2_read : IN STD_LOGIC_VECTOR (63 downto 0);
    other_a3_read : IN STD_LOGIC_VECTOR (63 downto 0);
    other_b1_read : IN STD_LOGIC_VECTOR (63 downto 0);
    other_b2_read : IN STD_LOGIC_VECTOR (63 downto 0);
    other_b3_read : IN STD_LOGIC_VECTOR (63 downto 0);
    other_c1_read : IN STD_LOGIC_VECTOR (63 downto 0);
    other_c2_read : IN STD_LOGIC_VECTOR (63 downto 0);
    other_c3_read : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of operator_mul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_310 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_316 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_322 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_328 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_334 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_340 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_346 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_352 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_358 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_i_reg_502 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_i_reg_507 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_i_reg_512 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_i_reg_517 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_i_reg_522 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_268_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_i_reg_527 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_i_reg_532 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_280_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_i_reg_537 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_286_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_i_reg_542 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_148_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_i_reg_589 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_152_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_i_reg_594 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_i_reg_599 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_i_reg_604 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_i_reg_609 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_i_reg_614 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_i_reg_619 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_i_reg_624 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_i_reg_629 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_148_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_152_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_156_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_160_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_164_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_168_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_172_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_176_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_180_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_184_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_190_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_196_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_208_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_214_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_220_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_226_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_232_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component filter_dadd_64ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component filter_dmul_64ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    filter_dadd_64ns_bkb_U1 : component filter_dadd_64ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_148_p0,
        din1 => grp_fu_148_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_148_p2);

    filter_dadd_64ns_bkb_U2 : component filter_dadd_64ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_152_p0,
        din1 => grp_fu_152_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_152_p2);

    filter_dadd_64ns_bkb_U3 : component filter_dadd_64ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_156_p0,
        din1 => grp_fu_156_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_156_p2);

    filter_dadd_64ns_bkb_U4 : component filter_dadd_64ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_160_p0,
        din1 => grp_fu_160_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_160_p2);

    filter_dadd_64ns_bkb_U5 : component filter_dadd_64ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_164_p0,
        din1 => grp_fu_164_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_164_p2);

    filter_dadd_64ns_bkb_U6 : component filter_dadd_64ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_168_p0,
        din1 => grp_fu_168_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_168_p2);

    filter_dadd_64ns_bkb_U7 : component filter_dadd_64ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_172_p0,
        din1 => grp_fu_172_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_172_p2);

    filter_dadd_64ns_bkb_U8 : component filter_dadd_64ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_176_p0,
        din1 => grp_fu_176_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_176_p2);

    filter_dadd_64ns_bkb_U9 : component filter_dadd_64ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_180_p0,
        din1 => grp_fu_180_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_180_p2);

    filter_dmul_64ns_cud_U10 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_184_p0,
        din1 => grp_fu_184_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_184_p2);

    filter_dmul_64ns_cud_U11 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_190_p0,
        din1 => grp_fu_190_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_190_p2);

    filter_dmul_64ns_cud_U12 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_196_p0,
        din1 => grp_fu_196_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_196_p2);

    filter_dmul_64ns_cud_U13 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_202_p0,
        din1 => grp_fu_202_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_202_p2);

    filter_dmul_64ns_cud_U14 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_208_p0,
        din1 => grp_fu_208_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_208_p2);

    filter_dmul_64ns_cud_U15 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_214_p0,
        din1 => grp_fu_214_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_214_p2);

    filter_dmul_64ns_cud_U16 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_220_p0,
        din1 => grp_fu_220_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_220_p2);

    filter_dmul_64ns_cud_U17 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_226_p0,
        din1 => grp_fu_226_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_226_p2);

    filter_dmul_64ns_cud_U18 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_232_p0,
        din1 => grp_fu_232_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_232_p2);

    filter_dmul_64ns_cud_U19 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mat3_b2_read,
        din1 => other_b2_read,
        ce => ap_const_logic_1,
        dout => grp_fu_238_p2);

    filter_dmul_64ns_cud_U20 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mat3_b1_read,
        din1 => other_a3_read,
        ce => ap_const_logic_1,
        dout => grp_fu_244_p2);

    filter_dmul_64ns_cud_U21 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mat3_b2_read,
        din1 => other_b3_read,
        ce => ap_const_logic_1,
        dout => grp_fu_250_p2);

    filter_dmul_64ns_cud_U22 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mat3_c1_read,
        din1 => other_a1_read,
        ce => ap_const_logic_1,
        dout => grp_fu_256_p2);

    filter_dmul_64ns_cud_U23 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mat3_c2_read,
        din1 => other_b1_read,
        ce => ap_const_logic_1,
        dout => grp_fu_262_p2);

    filter_dmul_64ns_cud_U24 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mat3_c1_read,
        din1 => other_a2_read,
        ce => ap_const_logic_1,
        dout => grp_fu_268_p2);

    filter_dmul_64ns_cud_U25 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mat3_c2_read,
        din1 => other_b2_read,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p2);

    filter_dmul_64ns_cud_U26 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mat3_c1_read,
        din1 => other_a3_read,
        ce => ap_const_logic_1,
        dout => grp_fu_280_p2);

    filter_dmul_64ns_cud_U27 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mat3_c2_read,
        din1 => other_b3_read,
        ce => ap_const_logic_1,
        dout => grp_fu_286_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_return_0_preg <= grp_fu_148_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_return_1_preg <= grp_fu_152_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_return_2_preg <= grp_fu_156_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_return_3_preg <= grp_fu_160_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_return_4_preg <= grp_fu_164_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_return_5_preg <= grp_fu_168_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_return_6_preg <= grp_fu_172_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_return_7_preg <= grp_fu_176_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_return_8_preg <= grp_fu_180_p2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                ap_return_0 <= grp_fu_148_p2;
                ap_return_1 <= grp_fu_152_p2;
                ap_return_2 <= grp_fu_156_p2;
                ap_return_3 <= grp_fu_160_p2;
                ap_return_4 <= grp_fu_164_p2;
                ap_return_5 <= grp_fu_168_p2;
                ap_return_6 <= grp_fu_172_p2;
                ap_return_7 <= grp_fu_176_p2;
                ap_return_8 <= grp_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_310 <= grp_fu_184_p2;
                reg_316 <= grp_fu_190_p2;
                reg_322 <= grp_fu_196_p2;
                reg_328 <= grp_fu_202_p2;
                reg_334 <= grp_fu_208_p2;
                reg_340 <= grp_fu_214_p2;
                reg_346 <= grp_fu_220_p2;
                reg_352 <= grp_fu_226_p2;
                reg_358 <= grp_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_28_i_reg_589 <= grp_fu_148_p2;
                tmp_32_i_reg_594 <= grp_fu_152_p2;
                tmp_36_i_reg_599 <= grp_fu_156_p2;
                tmp_40_i_reg_604 <= grp_fu_160_p2;
                tmp_44_i_reg_609 <= grp_fu_164_p2;
                tmp_48_i_reg_614 <= grp_fu_168_p2;
                tmp_52_i_reg_619 <= grp_fu_172_p2;
                tmp_56_i_reg_624 <= grp_fu_176_p2;
                tmp_60_i_reg_629 <= grp_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_43_i_reg_502 <= grp_fu_238_p2;
                tmp_46_i_reg_507 <= grp_fu_244_p2;
                tmp_47_i_reg_512 <= grp_fu_250_p2;
                tmp_50_i_reg_517 <= grp_fu_256_p2;
                tmp_51_i_reg_522 <= grp_fu_262_p2;
                tmp_54_i_reg_527 <= grp_fu_268_p2;
                tmp_55_i_reg_532 <= grp_fu_274_p2;
                tmp_58_i_reg_537 <= grp_fu_280_p2;
                tmp_59_i_reg_542 <= grp_fu_286_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_148_p0_assign_proc : process(reg_310, ap_CS_fsm_state6, tmp_28_i_reg_589, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_148_p0 <= tmp_28_i_reg_589;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_148_p0 <= reg_310;
        else 
            grp_fu_148_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_148_p1_assign_proc : process(reg_310, reg_316, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_148_p1 <= reg_310;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_148_p1 <= reg_316;
        else 
            grp_fu_148_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_152_p0_assign_proc : process(reg_322, ap_CS_fsm_state6, tmp_32_i_reg_594, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_152_p0 <= tmp_32_i_reg_594;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_152_p0 <= reg_322;
        else 
            grp_fu_152_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_152_p1_assign_proc : process(reg_316, reg_328, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_152_p1 <= reg_316;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_152_p1 <= reg_328;
        else 
            grp_fu_152_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_156_p0_assign_proc : process(reg_334, ap_CS_fsm_state6, tmp_36_i_reg_599, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_156_p0 <= tmp_36_i_reg_599;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_156_p0 <= reg_334;
        else 
            grp_fu_156_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_156_p1_assign_proc : process(reg_322, reg_340, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_156_p1 <= reg_322;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_156_p1 <= reg_340;
        else 
            grp_fu_156_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_160_p0_assign_proc : process(reg_346, ap_CS_fsm_state6, tmp_40_i_reg_604, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_160_p0 <= tmp_40_i_reg_604;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_160_p0 <= reg_346;
        else 
            grp_fu_160_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_160_p1_assign_proc : process(reg_328, reg_352, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_160_p1 <= reg_328;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_160_p1 <= reg_352;
        else 
            grp_fu_160_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_164_p0_assign_proc : process(reg_358, ap_CS_fsm_state6, tmp_44_i_reg_609, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_164_p0 <= tmp_44_i_reg_609;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_164_p0 <= reg_358;
        else 
            grp_fu_164_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_164_p1_assign_proc : process(reg_334, tmp_43_i_reg_502, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_164_p1 <= reg_334;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_164_p1 <= tmp_43_i_reg_502;
        else 
            grp_fu_164_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_168_p0_assign_proc : process(tmp_46_i_reg_507, ap_CS_fsm_state6, tmp_48_i_reg_614, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_168_p0 <= tmp_48_i_reg_614;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_168_p0 <= tmp_46_i_reg_507;
        else 
            grp_fu_168_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_168_p1_assign_proc : process(reg_340, tmp_47_i_reg_512, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_168_p1 <= reg_340;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_168_p1 <= tmp_47_i_reg_512;
        else 
            grp_fu_168_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_172_p0_assign_proc : process(tmp_50_i_reg_517, ap_CS_fsm_state6, tmp_52_i_reg_619, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_172_p0 <= tmp_52_i_reg_619;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_172_p0 <= tmp_50_i_reg_517;
        else 
            grp_fu_172_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_172_p1_assign_proc : process(reg_346, tmp_51_i_reg_522, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_172_p1 <= reg_346;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_172_p1 <= tmp_51_i_reg_522;
        else 
            grp_fu_172_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_176_p0_assign_proc : process(tmp_54_i_reg_527, ap_CS_fsm_state6, tmp_56_i_reg_624, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_176_p0 <= tmp_56_i_reg_624;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_176_p0 <= tmp_54_i_reg_527;
        else 
            grp_fu_176_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_176_p1_assign_proc : process(reg_352, tmp_55_i_reg_532, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_176_p1 <= reg_352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_176_p1 <= tmp_55_i_reg_532;
        else 
            grp_fu_176_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_180_p0_assign_proc : process(tmp_58_i_reg_537, ap_CS_fsm_state6, tmp_60_i_reg_629, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_180_p0 <= tmp_60_i_reg_629;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_180_p0 <= tmp_58_i_reg_537;
        else 
            grp_fu_180_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_180_p1_assign_proc : process(reg_358, tmp_59_i_reg_542, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_180_p1 <= reg_358;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_180_p1 <= tmp_59_i_reg_542;
        else 
            grp_fu_180_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_184_p0_assign_proc : process(ap_CS_fsm_state1, mat3_a1_read, mat3_a3_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_184_p0 <= mat3_a3_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_184_p0 <= mat3_a1_read;
        else 
            grp_fu_184_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_184_p1_assign_proc : process(ap_CS_fsm_state1, other_a1_read, other_c1_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_184_p1 <= other_c1_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_184_p1 <= other_a1_read;
        else 
            grp_fu_184_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_190_p0_assign_proc : process(ap_CS_fsm_state1, mat3_a2_read, mat3_a3_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_190_p0 <= mat3_a3_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_190_p0 <= mat3_a2_read;
        else 
            grp_fu_190_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_190_p1_assign_proc : process(ap_CS_fsm_state1, other_b1_read, other_c2_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_190_p1 <= other_c2_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_190_p1 <= other_b1_read;
        else 
            grp_fu_190_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_196_p0_assign_proc : process(ap_CS_fsm_state1, mat3_a1_read, mat3_a3_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_196_p0 <= mat3_a3_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_196_p0 <= mat3_a1_read;
        else 
            grp_fu_196_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_196_p1_assign_proc : process(ap_CS_fsm_state1, other_a2_read, other_c3_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_196_p1 <= other_c3_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_196_p1 <= other_a2_read;
        else 
            grp_fu_196_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_202_p0_assign_proc : process(ap_CS_fsm_state1, mat3_a2_read, mat3_b3_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_202_p0 <= mat3_b3_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_202_p0 <= mat3_a2_read;
        else 
            grp_fu_202_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_202_p1_assign_proc : process(ap_CS_fsm_state1, other_b2_read, other_c1_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_202_p1 <= other_c1_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_202_p1 <= other_b2_read;
        else 
            grp_fu_202_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_208_p0_assign_proc : process(ap_CS_fsm_state1, mat3_a1_read, mat3_b3_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_208_p0 <= mat3_b3_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_208_p0 <= mat3_a1_read;
        else 
            grp_fu_208_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_208_p1_assign_proc : process(ap_CS_fsm_state1, other_a3_read, other_c2_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_208_p1 <= other_c2_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_208_p1 <= other_a3_read;
        else 
            grp_fu_208_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_214_p0_assign_proc : process(ap_CS_fsm_state1, mat3_a2_read, mat3_b3_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_214_p0 <= mat3_b3_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_214_p0 <= mat3_a2_read;
        else 
            grp_fu_214_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_214_p1_assign_proc : process(ap_CS_fsm_state1, other_b3_read, other_c3_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_214_p1 <= other_c3_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_214_p1 <= other_b3_read;
        else 
            grp_fu_214_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_220_p0_assign_proc : process(ap_CS_fsm_state1, mat3_b1_read, mat3_c3_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_220_p0 <= mat3_c3_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_220_p0 <= mat3_b1_read;
        else 
            grp_fu_220_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_220_p1_assign_proc : process(ap_CS_fsm_state1, other_a1_read, other_c1_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_220_p1 <= other_c1_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_220_p1 <= other_a1_read;
        else 
            grp_fu_220_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_226_p0_assign_proc : process(ap_CS_fsm_state1, mat3_b2_read, mat3_c3_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_226_p0 <= mat3_c3_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_226_p0 <= mat3_b2_read;
        else 
            grp_fu_226_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_226_p1_assign_proc : process(ap_CS_fsm_state1, other_b1_read, other_c2_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_226_p1 <= other_c2_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_226_p1 <= other_b1_read;
        else 
            grp_fu_226_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_232_p0_assign_proc : process(ap_CS_fsm_state1, mat3_b1_read, mat3_c3_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_232_p0 <= mat3_c3_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_232_p0 <= mat3_b1_read;
        else 
            grp_fu_232_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_232_p1_assign_proc : process(ap_CS_fsm_state1, other_a2_read, other_c3_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_232_p1 <= other_c3_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_232_p1 <= other_a2_read;
        else 
            grp_fu_232_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

end behav;
