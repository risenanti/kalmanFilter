-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    agg_result_M0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_M0_ap_vld : OUT STD_LOGIC;
    agg_result_M1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_M1_ap_vld : OUT STD_LOGIC;
    agg_result_M2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_M2_ap_vld : OUT STD_LOGIC;
    agg_result_A_a1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_A_a1_ap_vld : OUT STD_LOGIC;
    agg_result_A_a2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_A_a2_ap_vld : OUT STD_LOGIC;
    agg_result_A_a3 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_A_a3_ap_vld : OUT STD_LOGIC;
    agg_result_A_b1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_A_b1_ap_vld : OUT STD_LOGIC;
    agg_result_A_b2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_A_b2_ap_vld : OUT STD_LOGIC;
    agg_result_A_b3 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_A_b3_ap_vld : OUT STD_LOGIC;
    agg_result_A_c1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_A_c1_ap_vld : OUT STD_LOGIC;
    agg_result_A_c2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_A_c2_ap_vld : OUT STD_LOGIC;
    agg_result_A_c3 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_A_c3_ap_vld : OUT STD_LOGIC;
    agg_result_P_a1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_P_a1_ap_vld : OUT STD_LOGIC;
    agg_result_P_a2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_P_a2_ap_vld : OUT STD_LOGIC;
    agg_result_P_a3 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_P_a3_ap_vld : OUT STD_LOGIC;
    agg_result_P_b1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_P_b1_ap_vld : OUT STD_LOGIC;
    agg_result_P_b2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_P_b2_ap_vld : OUT STD_LOGIC;
    agg_result_P_b3 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_P_b3_ap_vld : OUT STD_LOGIC;
    agg_result_P_c1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_P_c1_ap_vld : OUT STD_LOGIC;
    agg_result_P_c2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_P_c2_ap_vld : OUT STD_LOGIC;
    agg_result_P_c3 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_P_c3_ap_vld : OUT STD_LOGIC;
    agg_result_Q_a1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_Q_a1_ap_vld : OUT STD_LOGIC;
    agg_result_Q_a2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_Q_a2_ap_vld : OUT STD_LOGIC;
    agg_result_Q_a3 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_Q_a3_ap_vld : OUT STD_LOGIC;
    agg_result_Q_b1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_Q_b1_ap_vld : OUT STD_LOGIC;
    agg_result_Q_b2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_Q_b2_ap_vld : OUT STD_LOGIC;
    agg_result_Q_b3 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_Q_b3_ap_vld : OUT STD_LOGIC;
    agg_result_Q_c1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_Q_c1_ap_vld : OUT STD_LOGIC;
    agg_result_Q_c2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_Q_c2_ap_vld : OUT STD_LOGIC;
    agg_result_Q_c3 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_Q_c3_ap_vld : OUT STD_LOGIC;
    agg_result_MU : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_MU_ap_vld : OUT STD_LOGIC;
    agg_result_H0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_H0_ap_vld : OUT STD_LOGIC;
    agg_result_H1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_H1_ap_vld : OUT STD_LOGIC;
    agg_result_H2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_H2_ap_vld : OUT STD_LOGIC;
    agg_result_S : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_S_ap_vld : OUT STD_LOGIC;
    agg_result_K0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_K0_ap_vld : OUT STD_LOGIC;
    agg_result_K1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_K1_ap_vld : OUT STD_LOGIC;
    agg_result_K2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_K2_ap_vld : OUT STD_LOGIC;
    agg_result_Y : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_Y_ap_vld : OUT STD_LOGIC;
    value_M0 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_M1 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_M2 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_A_a1 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_A_a2 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_A_a3 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_A_b1 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_A_b2 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_A_b3 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_A_c1 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_A_c2 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_A_c3 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_P_a1 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_P_a2 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_P_a3 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_P_b1 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_P_b2 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_P_b3 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_P_c1 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_P_c2 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_P_c3 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_Q_a1 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_Q_a2 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_Q_a3 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_Q_b1 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_Q_b2 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_Q_b3 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_Q_c1 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_Q_c2 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_Q_c3 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_MU : IN STD_LOGIC_VECTOR (63 downto 0);
    value_H0 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_H1 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_H2 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_S : IN STD_LOGIC_VECTOR (63 downto 0);
    value_K0 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_K1 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_K2 : IN STD_LOGIC_VECTOR (63 downto 0);
    value_Y : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "filter,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku5p-ffvb676-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.543058,HLS_SYN_LAT=188,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=409,HLS_SYN_FF=24374,HLS_SYN_LUT=31319}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (71 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (71 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (71 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (71 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (71 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (71 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (71 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (71 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (71 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (71 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (71 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (71 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_750_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_843 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_fu_756_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_855 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal reg_864 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_fu_691_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_873 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal reg_884 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_operator_mul_fu_648_ap_idle : STD_LOGIC;
    signal grp_operator_mul_fu_648_ap_ready : STD_LOGIC;
    signal grp_operator_mul_fu_648_ap_done : STD_LOGIC;
    signal reg_892 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_cordic_sincos_generi_fu_682_ap_idle : STD_LOGIC;
    signal grp_cordic_sincos_generi_fu_682_ap_ready : STD_LOGIC;
    signal grp_cordic_sincos_generi_fu_682_ap_done : STD_LOGIC;
    signal ap_block_state16_on_subcall_done : BOOLEAN;
    signal reg_898 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_904 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_910 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_916 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_922 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_928 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_934 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_940 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_768_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_946 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_772_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_956 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_697_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_963 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_702_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_973 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_777_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_979 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_17_reg_1048 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal s_out_reg_1127 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_out_reg_1136 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tempAdd_a1_reg_1161 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempAdd_a2_reg_1167 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempAdd_b1_reg_1173 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_707_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempAdd_b2_reg_1179 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tempAdd_a3_reg_1205 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempAdd_b3_reg_1211 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempAdd_c1_reg_1217 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempAdd_c2_reg_1223 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal temp0_reg_1239 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_reg_1249 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp2_reg_1255 : STD_LOGIC_VECTOR (63 downto 0);
    signal value_M0_buf_assign_5_reg_1265 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_782_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempMat_b3_reg_1272 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_786_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempMat_c1_reg_1277 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_790_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempMat_c2_reg_1282 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_794_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempMat_c3_reg_1287 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_ap_start : STD_LOGIC;
    signal grp_operator_mul_fu_648_mat3_a1_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_mat3_a2_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_mat3_a3_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_mat3_b1_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_mat3_b2_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_mat3_b3_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_mat3_c1_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_mat3_c2_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_mat3_c3_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_other_a1_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_other_a2_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_other_a3_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_other_b1_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_other_b2_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_other_b3_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_other_c1_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_other_c2_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_other_c3_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_ap_return_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_ap_return_3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_ap_return_4 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_ap_return_5 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_ap_return_6 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_ap_return_7 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_ap_return_8 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cordic_sincos_generi_fu_682_ap_start : STD_LOGIC;
    signal grp_cordic_sincos_generi_fu_682_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cordic_sincos_generi_fu_682_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_mul_fu_648_ap_start_reg : STD_LOGIC := '0';
    signal grp_cordic_sincos_generi_fu_682_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal grp_fu_725_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_730_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_735_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_740_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_745_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_691_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal grp_fu_697_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_702_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_707_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_750_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_756_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_768_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_772_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_777_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_691_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_691_ce : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal grp_fu_697_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_702_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_707_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (71 downto 0);

    component operator_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mat3_a1_read : IN STD_LOGIC_VECTOR (63 downto 0);
        mat3_a2_read : IN STD_LOGIC_VECTOR (63 downto 0);
        mat3_a3_read : IN STD_LOGIC_VECTOR (63 downto 0);
        mat3_b1_read : IN STD_LOGIC_VECTOR (63 downto 0);
        mat3_b2_read : IN STD_LOGIC_VECTOR (63 downto 0);
        mat3_b3_read : IN STD_LOGIC_VECTOR (63 downto 0);
        mat3_c1_read : IN STD_LOGIC_VECTOR (63 downto 0);
        mat3_c2_read : IN STD_LOGIC_VECTOR (63 downto 0);
        mat3_c3_read : IN STD_LOGIC_VECTOR (63 downto 0);
        other_a1_read : IN STD_LOGIC_VECTOR (63 downto 0);
        other_a2_read : IN STD_LOGIC_VECTOR (63 downto 0);
        other_a3_read : IN STD_LOGIC_VECTOR (63 downto 0);
        other_b1_read : IN STD_LOGIC_VECTOR (63 downto 0);
        other_b2_read : IN STD_LOGIC_VECTOR (63 downto 0);
        other_b3_read : IN STD_LOGIC_VECTOR (63 downto 0);
        other_c1_read : IN STD_LOGIC_VECTOR (63 downto 0);
        other_c2_read : IN STD_LOGIC_VECTOR (63 downto 0);
        other_c3_read : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cordic_sincos_generi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component filter_dadddsub_6hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component filter_dsub_64ns_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component filter_dmul_64ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_operator_mul_fu_648 : component operator_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_operator_mul_fu_648_ap_start,
        ap_done => grp_operator_mul_fu_648_ap_done,
        ap_idle => grp_operator_mul_fu_648_ap_idle,
        ap_ready => grp_operator_mul_fu_648_ap_ready,
        mat3_a1_read => grp_operator_mul_fu_648_mat3_a1_read,
        mat3_a2_read => grp_operator_mul_fu_648_mat3_a2_read,
        mat3_a3_read => grp_operator_mul_fu_648_mat3_a3_read,
        mat3_b1_read => grp_operator_mul_fu_648_mat3_b1_read,
        mat3_b2_read => grp_operator_mul_fu_648_mat3_b2_read,
        mat3_b3_read => grp_operator_mul_fu_648_mat3_b3_read,
        mat3_c1_read => grp_operator_mul_fu_648_mat3_c1_read,
        mat3_c2_read => grp_operator_mul_fu_648_mat3_c2_read,
        mat3_c3_read => grp_operator_mul_fu_648_mat3_c3_read,
        other_a1_read => grp_operator_mul_fu_648_other_a1_read,
        other_a2_read => grp_operator_mul_fu_648_other_a2_read,
        other_a3_read => grp_operator_mul_fu_648_other_a3_read,
        other_b1_read => grp_operator_mul_fu_648_other_b1_read,
        other_b2_read => grp_operator_mul_fu_648_other_b2_read,
        other_b3_read => grp_operator_mul_fu_648_other_b3_read,
        other_c1_read => grp_operator_mul_fu_648_other_c1_read,
        other_c2_read => grp_operator_mul_fu_648_other_c2_read,
        other_c3_read => grp_operator_mul_fu_648_other_c3_read,
        ap_return_0 => grp_operator_mul_fu_648_ap_return_0,
        ap_return_1 => grp_operator_mul_fu_648_ap_return_1,
        ap_return_2 => grp_operator_mul_fu_648_ap_return_2,
        ap_return_3 => grp_operator_mul_fu_648_ap_return_3,
        ap_return_4 => grp_operator_mul_fu_648_ap_return_4,
        ap_return_5 => grp_operator_mul_fu_648_ap_return_5,
        ap_return_6 => grp_operator_mul_fu_648_ap_return_6,
        ap_return_7 => grp_operator_mul_fu_648_ap_return_7,
        ap_return_8 => grp_operator_mul_fu_648_ap_return_8);

    grp_cordic_sincos_generi_fu_682 : component cordic_sincos_generi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cordic_sincos_generi_fu_682_ap_start,
        ap_done => grp_cordic_sincos_generi_fu_682_ap_done,
        ap_idle => grp_cordic_sincos_generi_fu_682_ap_idle,
        ap_ready => grp_cordic_sincos_generi_fu_682_ap_ready,
        t_in => reg_873,
        ap_return_0 => grp_cordic_sincos_generi_fu_682_ap_return_0,
        ap_return_1 => grp_cordic_sincos_generi_fu_682_ap_return_1);

    filter_dadddsub_6hbi_U56 : component filter_dadddsub_6hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_691_p0,
        din1 => grp_fu_691_p1,
        opcode => grp_fu_691_opcode,
        ce => grp_fu_691_ce,
        dout => grp_fu_691_p2);

    filter_dadddsub_6hbi_U57 : component filter_dadddsub_6hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_697_p0,
        din1 => grp_fu_697_p1,
        opcode => grp_fu_697_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_697_p2);

    filter_dadddsub_6hbi_U58 : component filter_dadddsub_6hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_702_p0,
        din1 => grp_fu_702_p1,
        opcode => grp_fu_702_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_702_p2);

    filter_dadddsub_6hbi_U59 : component filter_dadddsub_6hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_707_p0,
        din1 => grp_fu_707_p1,
        opcode => grp_fu_707_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_707_p2);

    filter_dsub_64ns_ibs_U60 : component filter_dsub_64ns_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tempAdd_b2_reg_1179,
        din1 => reg_979,
        ce => ap_const_logic_1,
        dout => grp_fu_725_p2);

    filter_dsub_64ns_ibs_U61 : component filter_dsub_64ns_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tempAdd_b3_reg_1211,
        din1 => tempMat_b3_reg_1272,
        ce => ap_const_logic_1,
        dout => grp_fu_730_p2);

    filter_dsub_64ns_ibs_U62 : component filter_dsub_64ns_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tempAdd_c1_reg_1217,
        din1 => tempMat_c1_reg_1277,
        ce => ap_const_logic_1,
        dout => grp_fu_735_p2);

    filter_dsub_64ns_ibs_U63 : component filter_dsub_64ns_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tempAdd_c2_reg_1223,
        din1 => tempMat_c2_reg_1282,
        ce => ap_const_logic_1,
        dout => grp_fu_740_p2);

    filter_dsub_64ns_ibs_U64 : component filter_dsub_64ns_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_884,
        din1 => tempMat_c3_reg_1287,
        ce => ap_const_logic_1,
        dout => grp_fu_745_p2);

    filter_dmul_64ns_cud_U65 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_750_p0,
        din1 => grp_fu_750_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_750_p2);

    filter_dmul_64ns_cud_U66 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_756_p0,
        din1 => grp_fu_756_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_756_p2);

    filter_dmul_64ns_cud_U67 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_768_p0,
        din1 => grp_fu_768_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_768_p2);

    filter_dmul_64ns_cud_U68 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_772_p0,
        din1 => grp_fu_772_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_772_p2);

    filter_dmul_64ns_cud_U69 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_777_p0,
        din1 => grp_fu_777_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_777_p2);

    filter_dmul_64ns_cud_U70 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_855,
        din1 => temp2_reg_1255,
        ce => ap_const_logic_1,
        dout => grp_fu_782_p2);

    filter_dmul_64ns_cud_U71 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_946,
        din1 => temp0_reg_1239,
        ce => ap_const_logic_1,
        dout => grp_fu_786_p2);

    filter_dmul_64ns_cud_U72 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_946,
        din1 => reg_963,
        ce => ap_const_logic_1,
        dout => grp_fu_790_p2);

    filter_dmul_64ns_cud_U73 : component filter_dmul_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_946,
        din1 => temp2_reg_1255,
        ce => ap_const_logic_1,
        dout => grp_fu_794_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_cordic_sincos_generi_fu_682_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cordic_sincos_generi_fu_682_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_cordic_sincos_generi_fu_682_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cordic_sincos_generi_fu_682_ap_ready = ap_const_logic_1)) then 
                    grp_cordic_sincos_generi_fu_682_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_operator_mul_fu_648_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_operator_mul_fu_648_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
                    grp_operator_mul_fu_648_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_mul_fu_648_ap_ready = ap_const_logic_1)) then 
                    grp_operator_mul_fu_648_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                c_out_reg_1136 <= grp_cordic_sincos_generi_fu_682_ap_return_1;
                s_out_reg_1127 <= grp_cordic_sincos_generi_fu_682_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_843 <= grp_fu_750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_855 <= grp_fu_756_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27))) then
                reg_864 <= grp_fu_750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_873 <= grp_fu_691_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state32) or ((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then
                reg_884 <= grp_fu_691_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then
                reg_892 <= grp_operator_mul_fu_648_ap_return_0;
                reg_898 <= grp_operator_mul_fu_648_ap_return_1;
                reg_904 <= grp_operator_mul_fu_648_ap_return_2;
                reg_910 <= grp_operator_mul_fu_648_ap_return_3;
                reg_916 <= grp_operator_mul_fu_648_ap_return_4;
                reg_922 <= grp_operator_mul_fu_648_ap_return_5;
                reg_928 <= grp_operator_mul_fu_648_ap_return_6;
                reg_934 <= grp_operator_mul_fu_648_ap_return_7;
                reg_940 <= grp_operator_mul_fu_648_ap_return_8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42))) then
                reg_946 <= grp_fu_768_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state67))) then
                reg_956 <= grp_fu_772_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
                reg_963 <= grp_fu_697_p2;
                reg_973 <= grp_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state67))) then
                reg_979 <= grp_fu_777_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                temp0_reg_1239 <= grp_fu_691_p2;
                tmp_37_reg_1249 <= grp_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                temp2_reg_1255 <= grp_fu_691_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tempAdd_a1_reg_1161 <= grp_fu_691_p2;
                tempAdd_a2_reg_1167 <= grp_fu_697_p2;
                tempAdd_b1_reg_1173 <= grp_fu_702_p2;
                tempAdd_b2_reg_1179 <= grp_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tempAdd_a3_reg_1205 <= grp_fu_691_p2;
                tempAdd_b3_reg_1211 <= grp_fu_697_p2;
                tempAdd_c1_reg_1217 <= grp_fu_702_p2;
                tempAdd_c2_reg_1223 <= grp_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                tempMat_b3_reg_1272 <= grp_fu_782_p2;
                tempMat_c1_reg_1277 <= grp_fu_786_p2;
                tempMat_c2_reg_1282 <= grp_fu_790_p2;
                tempMat_c3_reg_1287 <= grp_fu_794_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_17_reg_1048 <= grp_fu_756_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                value_M0_buf_assign_5_reg_1265 <= grp_fu_697_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state17, grp_operator_mul_fu_648_ap_done, ap_CS_fsm_state16, ap_block_state16_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((grp_operator_mul_fu_648_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    agg_result_A_a1 <= value_A_a1;

    agg_result_A_a1_ap_vld_assign_proc : process(ap_CS_fsm_state16, ap_block_state16_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            agg_result_A_a1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_a1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_a2 <= value_A_a2;

    agg_result_A_a2_ap_vld_assign_proc : process(ap_CS_fsm_state16, ap_block_state16_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            agg_result_A_a2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_a2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_a3 <= value_A_a3;

    agg_result_A_a3_ap_vld_assign_proc : process(ap_CS_fsm_state16, ap_block_state16_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            agg_result_A_a3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_a3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_b1 <= value_A_b1;

    agg_result_A_b1_ap_vld_assign_proc : process(ap_CS_fsm_state16, ap_block_state16_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            agg_result_A_b1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_b1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_b2 <= value_A_b2;

    agg_result_A_b2_ap_vld_assign_proc : process(ap_CS_fsm_state16, ap_block_state16_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            agg_result_A_b2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_b2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_b3 <= value_A_b3;

    agg_result_A_b3_ap_vld_assign_proc : process(ap_CS_fsm_state16, ap_block_state16_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            agg_result_A_b3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_b3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_c1 <= value_A_c1;

    agg_result_A_c1_ap_vld_assign_proc : process(ap_CS_fsm_state16, ap_block_state16_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            agg_result_A_c1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_c1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_c2 <= value_A_c2;

    agg_result_A_c2_ap_vld_assign_proc : process(ap_CS_fsm_state16, ap_block_state16_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            agg_result_A_c2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_c2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_A_c3 <= value_A_c3;

    agg_result_A_c3_ap_vld_assign_proc : process(ap_CS_fsm_state16, ap_block_state16_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            agg_result_A_c3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_A_c3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_H0 <= reg_843;

    agg_result_H0_ap_vld_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            agg_result_H0_ap_vld <= ap_const_logic_1;
        else 
            agg_result_H0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_H1 <= ap_const_lv64_0;

    agg_result_H1_ap_vld_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            agg_result_H1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_H1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_H2 <= s_out_reg_1127;

    agg_result_H2_ap_vld_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            agg_result_H2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_H2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_K0 <= temp0_reg_1239;

    agg_result_K0_ap_vld_assign_proc : process(ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            agg_result_K0_ap_vld <= ap_const_logic_1;
        else 
            agg_result_K0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_K1 <= reg_963;

    agg_result_K1_ap_vld_assign_proc : process(ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            agg_result_K1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_K1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_K2 <= temp2_reg_1255;

    agg_result_K2_ap_vld_assign_proc : process(ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            agg_result_K2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_K2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_M0 <= value_M0_buf_assign_5_reg_1265;

    agg_result_M0_ap_vld_assign_proc : process(ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            agg_result_M0_ap_vld <= ap_const_logic_1;
        else 
            agg_result_M0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_M1 <= grp_fu_697_p2;

    agg_result_M1_ap_vld_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            agg_result_M1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_M1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_M2 <= grp_fu_702_p2;

    agg_result_M2_ap_vld_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            agg_result_M2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_M2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_MU <= reg_864;

    agg_result_MU_ap_vld_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            agg_result_MU_ap_vld <= ap_const_logic_1;
        else 
            agg_result_MU_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_a1 <= grp_fu_691_p2;

    agg_result_P_a1_ap_vld_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            agg_result_P_a1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_a1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_a2 <= grp_fu_697_p2;

    agg_result_P_a2_ap_vld_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            agg_result_P_a2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_a2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_a3 <= grp_fu_702_p2;

    agg_result_P_a3_ap_vld_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            agg_result_P_a3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_a3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_b1 <= grp_fu_707_p2;

    agg_result_P_b1_ap_vld_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            agg_result_P_b1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_b1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_b2 <= grp_fu_725_p2;

    agg_result_P_b2_ap_vld_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            agg_result_P_b2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_b2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_b3 <= grp_fu_730_p2;

    agg_result_P_b3_ap_vld_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            agg_result_P_b3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_b3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_c1 <= grp_fu_735_p2;

    agg_result_P_c1_ap_vld_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            agg_result_P_c1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_c1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_c2 <= grp_fu_740_p2;

    agg_result_P_c2_ap_vld_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            agg_result_P_c2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_c2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_P_c3 <= grp_fu_745_p2;

    agg_result_P_c3_ap_vld_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            agg_result_P_c3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_P_c3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_a1 <= value_Q_a1;

    agg_result_Q_a1_ap_vld_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            agg_result_Q_a1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_a1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_a2 <= value_Q_a2;

    agg_result_Q_a2_ap_vld_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            agg_result_Q_a2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_a2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_a3 <= value_Q_a3;

    agg_result_Q_a3_ap_vld_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            agg_result_Q_a3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_a3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_b1 <= value_Q_b1;

    agg_result_Q_b1_ap_vld_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            agg_result_Q_b1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_b1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_b2 <= value_Q_b2;

    agg_result_Q_b2_ap_vld_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            agg_result_Q_b2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_b2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_b3 <= value_Q_b3;

    agg_result_Q_b3_ap_vld_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            agg_result_Q_b3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_b3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_c1 <= value_Q_c1;

    agg_result_Q_c1_ap_vld_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            agg_result_Q_c1_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_c1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_c2 <= value_Q_c2;

    agg_result_Q_c2_ap_vld_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            agg_result_Q_c2_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_c2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Q_c3 <= value_Q_c3;

    agg_result_Q_c3_ap_vld_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            agg_result_Q_c3_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Q_c3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_S <= reg_873;

    agg_result_S_ap_vld_assign_proc : process(ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            agg_result_S_ap_vld <= ap_const_logic_1;
        else 
            agg_result_S_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_Y <= value_Y;

    agg_result_Y_ap_vld_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            agg_result_Y_ap_vld <= ap_const_logic_1;
        else 
            agg_result_Y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state16_on_subcall_done_assign_proc : process(grp_operator_mul_fu_648_ap_done, grp_cordic_sincos_generi_fu_682_ap_done)
    begin
                ap_block_state16_on_subcall_done <= ((grp_cordic_sincos_generi_fu_682_ap_done = ap_const_logic_0) or (grp_operator_mul_fu_648_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_cordic_sincos_generi_fu_682_ap_start <= grp_cordic_sincos_generi_fu_682_ap_start_reg;

    grp_fu_691_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state17, grp_operator_mul_fu_648_ap_done, ap_CS_fsm_state16, ap_block_state16_on_subcall_done, ap_CS_fsm_state3, ap_CS_fsm_state58, ap_CS_fsm_state63, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_1 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((grp_operator_mul_fu_648_ap_done = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            grp_fu_691_ce <= ap_const_logic_0;
        else 
            grp_fu_691_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_691_opcode_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state53, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_691_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_691_opcode <= ap_const_lv2_0;
        else 
            grp_fu_691_opcode <= "XX";
        end if; 
    end process;


    grp_fu_691_p0_assign_proc : process(reg_843, reg_864, reg_873, reg_884, reg_892, reg_904, reg_940, reg_963, reg_973, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state18, tempAdd_a1_reg_1161, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state53, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_691_p0 <= tempAdd_a1_reg_1161;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_691_p0 <= reg_973;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_691_p0 <= reg_963;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_691_p0 <= reg_940;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_691_p0 <= reg_904;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_691_p0 <= reg_892;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_691_p0 <= reg_884;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            grp_fu_691_p0 <= reg_873;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_691_p0 <= reg_864;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_691_p0 <= reg_843;
        else 
            grp_fu_691_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_691_p1_assign_proc : process(value_Q_a1, value_Q_a3, value_Q_c3, reg_843, reg_855, reg_864, ap_CS_fsm_state6, tmp_17_reg_1048, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state53, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_fu_691_p1 <= ap_const_lv64_3FF0000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_691_p1 <= value_Q_c3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_691_p1 <= value_Q_a3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_691_p1 <= value_Q_a1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_691_p1 <= reg_864;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            grp_fu_691_p1 <= reg_843;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_691_p1 <= tmp_17_reg_1048;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_691_p1 <= reg_855;
        else 
            grp_fu_691_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_697_opcode_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_697_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_697_opcode <= ap_const_lv2_0;
        else 
            grp_fu_697_opcode <= "XX";
        end if; 
    end process;


    grp_fu_697_p0_assign_proc : process(reg_864, reg_873, reg_898, reg_922, reg_973, ap_CS_fsm_state18, tempAdd_a2_reg_1167, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, value_M0_buf_assign_5_reg_1265, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_697_p0 <= tempAdd_a2_reg_1167;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_697_p0 <= value_M0_buf_assign_5_reg_1265;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_697_p0 <= reg_873;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_697_p0 <= reg_973;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_697_p0 <= reg_864;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_697_p0 <= reg_922;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_697_p0 <= reg_898;
        else 
            grp_fu_697_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_697_p1_assign_proc : process(value_Q_a2, value_Q_b3, reg_855, reg_946, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_697_p1 <= reg_946;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_697_p1 <= reg_855;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_697_p1 <= value_Q_b3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_697_p1 <= value_Q_a2;
        else 
            grp_fu_697_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_702_opcode_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state48, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_702_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_702_opcode <= ap_const_lv2_0;
        else 
            grp_fu_702_opcode <= "XX";
        end if; 
    end process;


    grp_fu_702_p0_assign_proc : process(reg_910, reg_928, reg_946, reg_956, ap_CS_fsm_state18, ap_CS_fsm_state23, tempAdd_a3_reg_1205, ap_CS_fsm_state28, ap_CS_fsm_state33, value_M0_buf_assign_5_reg_1265, ap_CS_fsm_state48, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_702_p0 <= tempAdd_a3_reg_1205;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_702_p0 <= value_M0_buf_assign_5_reg_1265;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_702_p0 <= reg_956;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_702_p0 <= reg_946;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_702_p0 <= reg_928;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_702_p0 <= reg_910;
        else 
            grp_fu_702_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_702_p1_assign_proc : process(value_Q_b1, value_Q_c1, reg_946, reg_956, reg_979, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state48, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            grp_fu_702_p1 <= reg_946;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_702_p1 <= reg_979;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_702_p1 <= reg_956;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_702_p1 <= value_Q_c1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_702_p1 <= value_Q_b1;
        else 
            grp_fu_702_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_707_opcode_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state33, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_707_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_707_opcode <= ap_const_lv2_0;
        else 
            grp_fu_707_opcode <= "XX";
        end if; 
    end process;


    grp_fu_707_p0_assign_proc : process(value_Y, reg_916, reg_934, ap_CS_fsm_state18, tempAdd_b1_reg_1173, ap_CS_fsm_state23, ap_CS_fsm_state33, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_707_p0 <= tempAdd_b1_reg_1173;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_707_p0 <= value_Y;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_707_p0 <= reg_934;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_707_p0 <= reg_916;
        else 
            grp_fu_707_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_707_p1_assign_proc : process(value_Q_b2, value_Q_c2, reg_864, reg_956, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state33, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_707_p1 <= reg_956;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_707_p1 <= reg_864;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_707_p1 <= value_Q_c2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_707_p1 <= value_Q_b2;
        else 
            grp_fu_707_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_750_p0_assign_proc : process(ap_CS_fsm_state1, value_A_a1, value_A_a3, value_A_c1, value_A_c3, reg_843, reg_884, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state8, s_out_reg_1127, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, temp0_reg_1239, temp2_reg_1255, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state58, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_750_p0 <= temp2_reg_1255;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_750_p0 <= temp0_reg_1239;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_750_p0 <= s_out_reg_1127;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_750_p0 <= reg_843;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_750_p0 <= reg_884;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_750_p0 <= value_A_c3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_750_p0 <= value_A_a3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_750_p0 <= value_A_c1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_750_p0 <= value_A_a1;
        else 
            grp_fu_750_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_750_p1_assign_proc : process(ap_CS_fsm_state1, value_M0, value_M2, reg_843, reg_873, reg_884, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state8, s_out_reg_1127, c_out_reg_1136, ap_CS_fsm_state18, tempAdd_a1_reg_1161, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, temp0_reg_1239, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state58, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_750_p1 <= temp0_reg_1239;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_750_p1 <= reg_873;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_750_p1 <= reg_843;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_750_p1 <= reg_884;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_750_p1 <= s_out_reg_1127;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_750_p1 <= tempAdd_a1_reg_1161;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_750_p1 <= c_out_reg_1136;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_750_p1 <= value_M2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_750_p1 <= value_M0;
        else 
            grp_fu_750_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_756_p0_assign_proc : process(ap_CS_fsm_state1, value_A_a2, value_A_c2, reg_843, reg_963, ap_CS_fsm_state3, s_out_reg_1127, tempAdd_b1_reg_1173, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state58, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_756_p0 <= reg_843;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_756_p0 <= reg_963;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_756_p0 <= s_out_reg_1127;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_756_p0 <= tempAdd_b1_reg_1173;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_756_p0 <= value_A_c2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_756_p0 <= value_A_a2;
        else 
            grp_fu_756_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_756_p1_assign_proc : process(ap_CS_fsm_state1, value_M1, reg_873, reg_963, ap_CS_fsm_state3, ap_CS_fsm_state23, tempAdd_c1_reg_1217, ap_CS_fsm_state28, tmp_37_reg_1249, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state58, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_756_p1 <= reg_963;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_756_p1 <= reg_873;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_756_p1 <= tmp_37_reg_1249;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_756_p1 <= tempAdd_c1_reg_1217;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_756_p1 <= ap_const_lv64_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_756_p1 <= value_M1;
        else 
            grp_fu_756_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_768_p0_assign_proc : process(reg_843, s_out_reg_1127, ap_CS_fsm_state23, ap_CS_fsm_state28, temp0_reg_1239, temp2_reg_1255, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state58, ap_CS_fsm_state63)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            grp_fu_768_p0 <= temp2_reg_1255;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_768_p0 <= temp0_reg_1239;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_768_p0 <= s_out_reg_1127;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_768_p0 <= reg_843;
        else 
            grp_fu_768_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_768_p1_assign_proc : process(reg_873, tempAdd_a2_reg_1167, ap_CS_fsm_state23, tempAdd_c2_reg_1223, ap_CS_fsm_state28, tmp_37_reg_1249, temp2_reg_1255, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state58, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_768_p1 <= temp2_reg_1255;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_768_p1 <= reg_873;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_768_p1 <= tmp_37_reg_1249;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_768_p1 <= tempAdd_c2_reg_1223;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_768_p1 <= tempAdd_a2_reg_1167;
        else 
            grp_fu_768_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_772_p0_assign_proc : process(reg_843, reg_855, tempAdd_b2_reg_1179, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_772_p0 <= reg_855;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_772_p0 <= reg_843;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_772_p0 <= tempAdd_b2_reg_1179;
        else 
            grp_fu_772_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_772_p1_assign_proc : process(ap_CS_fsm_state23, tempAdd_a3_reg_1205, ap_CS_fsm_state28, temp0_reg_1239, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_772_p1 <= temp0_reg_1239;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_772_p1 <= tempAdd_a3_reg_1205;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_772_p1 <= ap_const_lv64_0;
        else 
            grp_fu_772_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_777_p0_assign_proc : process(reg_855, tempAdd_b3_reg_1211, ap_CS_fsm_state28, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_777_p0 <= reg_855;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_777_p0 <= tempAdd_b3_reg_1211;
        else 
            grp_fu_777_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_777_p1_assign_proc : process(reg_963, ap_CS_fsm_state28, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_777_p1 <= reg_963;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_777_p1 <= ap_const_lv64_0;
        else 
            grp_fu_777_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_operator_mul_fu_648_ap_start <= grp_operator_mul_fu_648_ap_start_reg;

    grp_operator_mul_fu_648_mat3_a1_read_assign_proc : process(value_A_a1, ap_CS_fsm_state17, reg_892, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_mat3_a1_read <= reg_892;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_mat3_a1_read <= value_A_a1;
        else 
            grp_operator_mul_fu_648_mat3_a1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_a2_read_assign_proc : process(value_A_a2, ap_CS_fsm_state17, ap_CS_fsm_state16, reg_898)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_mat3_a2_read <= reg_898;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_mat3_a2_read <= value_A_a2;
        else 
            grp_operator_mul_fu_648_mat3_a2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_a3_read_assign_proc : process(value_A_a3, ap_CS_fsm_state17, ap_CS_fsm_state16, reg_904)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_mat3_a3_read <= reg_904;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_mat3_a3_read <= value_A_a3;
        else 
            grp_operator_mul_fu_648_mat3_a3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_b1_read_assign_proc : process(value_A_b1, ap_CS_fsm_state17, ap_CS_fsm_state16, reg_910)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_mat3_b1_read <= reg_910;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_mat3_b1_read <= value_A_b1;
        else 
            grp_operator_mul_fu_648_mat3_b1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_b2_read_assign_proc : process(value_A_b2, ap_CS_fsm_state17, ap_CS_fsm_state16, reg_916)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_mat3_b2_read <= reg_916;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_mat3_b2_read <= value_A_b2;
        else 
            grp_operator_mul_fu_648_mat3_b2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_b3_read_assign_proc : process(value_A_b3, ap_CS_fsm_state17, ap_CS_fsm_state16, reg_922)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_mat3_b3_read <= reg_922;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_mat3_b3_read <= value_A_b3;
        else 
            grp_operator_mul_fu_648_mat3_b3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_c1_read_assign_proc : process(value_A_c1, ap_CS_fsm_state17, ap_CS_fsm_state16, reg_928)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_mat3_c1_read <= reg_928;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_mat3_c1_read <= value_A_c1;
        else 
            grp_operator_mul_fu_648_mat3_c1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_c2_read_assign_proc : process(value_A_c2, ap_CS_fsm_state17, ap_CS_fsm_state16, reg_934)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_mat3_c2_read <= reg_934;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_mat3_c2_read <= value_A_c2;
        else 
            grp_operator_mul_fu_648_mat3_c2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_mat3_c3_read_assign_proc : process(value_A_c3, ap_CS_fsm_state17, ap_CS_fsm_state16, reg_940)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_mat3_c3_read <= reg_940;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_mat3_c3_read <= value_A_c3;
        else 
            grp_operator_mul_fu_648_mat3_c3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_a1_read_assign_proc : process(value_A_a1, value_P_a1, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_other_a1_read <= value_A_a1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_other_a1_read <= value_P_a1;
        else 
            grp_operator_mul_fu_648_other_a1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_a2_read_assign_proc : process(value_A_b1, value_P_a2, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_other_a2_read <= value_A_b1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_other_a2_read <= value_P_a2;
        else 
            grp_operator_mul_fu_648_other_a2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_a3_read_assign_proc : process(value_A_c1, value_P_a3, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_other_a3_read <= value_A_c1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_other_a3_read <= value_P_a3;
        else 
            grp_operator_mul_fu_648_other_a3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_b1_read_assign_proc : process(value_A_a2, value_P_b1, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_other_b1_read <= value_A_a2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_other_b1_read <= value_P_b1;
        else 
            grp_operator_mul_fu_648_other_b1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_b2_read_assign_proc : process(value_A_b2, value_P_b2, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_other_b2_read <= value_A_b2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_other_b2_read <= value_P_b2;
        else 
            grp_operator_mul_fu_648_other_b2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_b3_read_assign_proc : process(value_A_c2, value_P_b3, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_other_b3_read <= value_A_c2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_other_b3_read <= value_P_b3;
        else 
            grp_operator_mul_fu_648_other_b3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_c1_read_assign_proc : process(value_A_a3, value_P_c1, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_other_c1_read <= value_A_a3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_other_c1_read <= value_P_c1;
        else 
            grp_operator_mul_fu_648_other_c1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_c2_read_assign_proc : process(value_A_b3, value_P_c2, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_other_c2_read <= value_A_b3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_other_c2_read <= value_P_c2;
        else 
            grp_operator_mul_fu_648_other_c2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_mul_fu_648_other_c3_read_assign_proc : process(value_A_c3, value_P_c3, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_operator_mul_fu_648_other_c3_read <= value_A_c3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_operator_mul_fu_648_other_c3_read <= value_P_c3;
        else 
            grp_operator_mul_fu_648_other_c3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

end behav;
